name: Install Tests
on:
  workflow_call:
    inputs:
      test_config_file:
        required: true
        type: string
        description: Test JIRA ID of installation using config file
      test_set:
        required: true
        type: string
        description: Install tests test set
      tests_to_validate:
        required: true
        type: string
        description: Test JIRA ID of cucumber tests to be validated
      nightly:
        required: false
        type: boolean
        default: false
        description: If it is a nightly execution
    secrets:
      gh_token:
        required: true
      slack_token_id:
        required: true
      jira_username:
        required: true
      jira_password:
        required: true
      xray_clientid:
        required: true
      xray_secret:
        required: true

env:
  XRAY_CLIENTID: ${{ secrets.xray_clientid }}
  XRAY_SECRET: ${{ secrets.xray_secret }}
  JIRA_USERNAME: ${{ secrets.jira_username }}
  JIRA_PASSWORD: ${{ secrets.jira_password }}

jobs:
  Run-tests:
    runs-on: integration-pipeline
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip

      - name: Update/upgrade host packages
        run: |
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do echo Waiting for other software managers to finish... ; sleep 5;done
          sudo apt-get update
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do echo Waiting for other software managers to finish... ; sleep 5;done
          sudo apt-get upgrade -y

      - name: Feature file validation
        shell: bash
        run: |
          # create virtual environment
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate

          # install tests requirements in venv
          pip install -r requirements.txt

          python3 testcasemanagement/testcase_importer.py --target "${{ inputs.tests_to_validate }}"
          python3 testcasemanagement/feature_file_processor.py --validate

          # deactivate venv
          deactivate

      - name: Prepare QA Feature File Validation slack message
        if: always()
        id: pre_slack_file_val
        run: |
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), build is unstable :rain_cloud: \
          Feature File Validation Step FAILED and stopped install tests Pipeline :rain_cloud: \
          Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} \
          Validate logs for cause troubleshooting."
          echo ::set-output name=msg_error::$MESSAGE_ERR

      - name: Slack message failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C02PB9A9F45"
          slack-message: ${{ steps.pre_slack_file_val.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Install tests using config file with full clean
        timeout-minutes: 30
        shell: bash
        run: |
          # activate venv
          . venv/bin/activate

          # delete results folder
          rm -rf results/*

          # tests execution
          pytest \
            tests/ \
            -k ${{ inputs.test_config_file }} \
            --installPath="." \
            --jsonConfigFilePath="config/platform_example_script.json" --full_clean

          # remove virtual environment
          deactivate

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: install_config_file
          path: ./results/*

      - name: Clean results folder
        if: always()
        shell: bash
        run: |
          rm -rf ./results/*

      - name: Install tests suite
        timeout-minutes: 30
        shell: bash
        run: |
          # activate venv
          . venv/bin/activate

          # arguments
          pytest_args=" tests/"
          pytest_args="${pytest_args} -k ${{ inputs.test_set }}"

          # when nightly fail on xpassed to give visibility to issues
          if [ "${{ inputs.nightly }}" = "true" ];
          then
            pytest_args="${pytest_args} --runxfail"
          fi

          # tests execution
          pytest ${pytest_args}

          # remove virtual environment
          deactivate

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: install_suite
          path: ./results/*

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

      - name: Prepare slack variables
        if: always()
        id: pre_slack
        run: |
          MESSAGE=":white_check_mark: CI: ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/}), stable :sunny: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), unstable :rain_cloud: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo ::set-output name=msg::$MESSAGE
          echo ::set-output name=msg_error::$MESSAGE_ERR

      - name: Slack message success
        if: ${{ inputs.nightly == 'true' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'C03UR8XKNBB'
          slack-message: ${{ steps.pre_slack.outputs.msg }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Slack message failure
        if: ${{ inputs.nightly == 'true' && failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'C03UR8XKNBB'
          slack-message: ${{ steps.pre_slack.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

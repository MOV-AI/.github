name: Build, Deploy and release Docker images
on:
  workflow_call:
    inputs:
      build_args:
        required: false
        type: string
      docker_registry:
        required: false
        type: string
        default: registry.aws.cloud.mov.ai
      public_registry:
        required: false
        type: string
        default: pubregistry.aws.cloud.mov.ai
      docker_file:
        required: true
        type: string
      docker_image:
        required: true
        type: string
      github_ref:
        required: true
        type: string
      public:
        required: false
        type: boolean
        default: false
      deploy:
        required: false
        type: boolean
        default: false
      version:
        required: false
        type: string
        default: local
      public_image:
        required: false
        type: string
      push_latest:
        required: false
        type: boolean
        default: false
    secrets:
      registry_user:
        required: true
      registry_password:
        required: true
      snyk_token:
        required: false

jobs:
  build_deploy:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Hadolint ${{ inputs.docker_file }}
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ${{ inputs.docker_file }}
          format: tty
          failure-threshold: error # optional, default is info
          # A space separated string of rules to ignore
          # ignore: # optional
          # Path to a config file
          # config: # optional

      - name: Login to Private Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ inputs.docker_registry }}

      - name: Login to Public Registry
        if: ${{ inputs.public }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ inputs.public_registry }}

      - name: Compute docker image names
        id: get_image_names
        env:
          PUBLIC_PUSH: ${{ inputs.public }}
          LATEST: ${{ inputs.push_latest }}
        run: |
          PUB_DOCKER_IMAGES=""
          DOCKER_IMAGES=${{ inputs.docker_registry }}/${{ inputs.docker_image }}:${{ inputs.version }}

          if [ "${LATEST}" = "true" ]; then
            DOCKER_IMAGES="$DOCKER_IMAGES,${{ inputs.docker_registry }}/${{ inputs.docker_image }}:latest"
          fi

          # If public push is needed
          if [ "${PUBLIC_PUSH}" = "true" ]; then
            DOCKER_IMAGES="$DOCKER_IMAGES,${{ inputs.public_registry }}/${{ inputs.public_image }}:${{ inputs.version }}"

            if [ "${LATEST}" = "true" ]; then
              DOCKER_IMAGES="$DOCKER_IMAGES,${{ inputs.public_registry }}/${{ inputs.public_image }}:latest"
            fi
          fi

          echo "::set-output name=DOCKER_IMAGES::$DOCKER_IMAGES"

          echo -e "Docker images to publish:\n$DOCKER_IMAGES"

      - name: Compute docker build arguments
        id: get_build_args
        run: |
          BUILD_ARGS_INPUT="${{ inputs.build_args }}"
          BUILD_ARGS_JSON=""
          for arg in $BUILD_ARGS_INPUT; do
            BUILD_ARGS_JSON="$BUILD_ARGS_JSON\"$arg\","
          done
          if [ -n "$BUILD_ARGS_JSON" ]; then
            BUILD_ARGS_JSON="[${BUILD_ARGS_JSON::-1}]"
            echo "::set-output name=build_args_json::$BUILD_ARGS_JSON"
            echo -e "Docker build arguments:\n$BUILD_ARGS_JSON"
          fi

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: packages
          path: dist

      - name: Build and push:${{ inputs.deploy }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ inputs.docker_file }}
          push: ${{ inputs.deploy }}
          tags: ${{ steps.get_image_names.outputs.DOCKER_IMAGES }}
          pull: true
          build-args: ${{ steps.get_build_args.outputs.build_args_json && fromJson(steps.get_build_args.outputs.build_args_json) }}

      - name: Check snyk_secret presence
        id: snyk_secret
        shell: bash
        run: |
          if [ "$SNYK_TOKEN_ENV" == "" ]; then
            echo ::set-output name=snyk_check::false
          else
            echo ::set-output name=snyk_check::true
          fi
        env:
          SNYK_TOKEN_ENV: ${{ secrets.snyk_token}}

      - name: Run Snyk to check Docker image for vulnerabilities
        if: ${{ steps.snyk_secret.outputs.snyk_check }}
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          image: ${{ steps.get_image_names.outputs.DOCKER_IMAGES }}
          args: --severity-threshold=high --file=${{ inputs.docker_file }}

      - name: Upload result to GitHub Code Scanning
        if: ${{ steps.snyk_secret.outputs.snyk_check }}
        if: ${{ secrets.snyk_token }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

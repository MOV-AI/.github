name: Deploy Helm Chart
on:
  workflow_call:
    inputs:
      promotion:
        required: true
        type: boolean
      deployment_app_name:
        required: true
        type: string
      aws_cluster_name:
        required: true
        type: string
      deployment_slack_channel:
        required: false
        type: string
        default: 'C05UYMX2U0K'
      aws_region:
        required: true
        type: string
    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      slack_token_id:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      gh_token:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      chart_secrets:
        required: false


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
  AWS_DEFAULT_REGION: ${{ inputs.aws_region }}

jobs:

  Deploy:
    runs-on: ubuntu-20.04
    container:
      image: registry.cloud.mov.ai/qa/tf-buildserver:v1.0.7
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set eks context and get pods
        shell: bash
        run: |
          aws eks --region ${{ env.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ inputs.aws_cluster_name }}  
          kubectl get svc,po

      - name: Replace Secrets
        shell: bash
        run: |
          echo "${{ secrets.chart_secrets }}">secrets.json
          python3 -m pip install jinja-cli
          find . -type f -name '*.yaml' -exec jinja -d secrets.json {} -o {} \;


      - name: Stash secrets
        uses: actions/upload-artifact@v3
        with:
          name: secrets
          path: secrets.json

      - name: Deploy Helm Chart
        id: deploy
        shell: bash
        run: |
            ./deploy.bash
            echo "deployment_revision=$(cat deployment_revision.txt)" >> $GITHUB_OUTPUT  
        env:
          IS_PROMOTION: ${{ inputs.promotion }}

      - name: Find Package details
        if: ${{ inputs.promotion == false }}
        id: vars
        run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${GITHUB_REF#refs/heads/} -- version
          PACKAGE_VERSION=$(cat version)
          echo "pkg_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
  
      - name: Raise Version
        if: ${{ inputs.promotion == false }}
        id: vars-after-raise
        run: |
          PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
          main_version=${PACKAGE_VERSION%-*}
          build_id="${PACKAGE_VERSION#*-}"
          raised_buildid=$(($build_id+1))
          RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
          echo $RAISED_PACKAGE_VERSION>version
          echo "pkg_version=${RAISED_PACKAGE_VERSION}" >> $GITHUB_OUTPUT
  
      - name: Commit raise version
        id: raise
        if: ${{ inputs.promotion == false }}
        run: |
          git config --global --add safe.directory  $(pwd)
          git config --global user.name '${{ secrets.auto_commit_user }}'
          git config --global user.email '${{ secrets.auto_commit_mail }}'
          git config --global user.password ${{ secrets.auto_commit_pwd }}
          
          version=$(cat version)
          # danger zone. Everything will be deleted.
          git restore version
          git pull
          echo "$version" > version

          git add version
          git commit -m "[skip actions] Automatic Bump of build version"
  
      - name: Prepare raise variables
        if: ${{ inputs.promotion == false }}
        id: pre_raise
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          
      - name: Raise App version
        uses: CasperWA/push-protected@v2
        if: ${{ inputs.promotion == false }}
        with:
          token: ${{ secrets.auto_commit_pwd }}
          branch: ${{ steps.pre_raise.outputs.branch }}
          unprotect_reviews: true
      
      - name: Commit info
        id: commit
        if: ${{ inputs.promotion == false }}
        shell: bash
        run: |
          commit_hash=$(git log --format="%H" -n 1)
          echo "commit_id=${commit_hash}" >> $GITHUB_OUTPUT
          
          
      - name: Create Github Release
        if: ${{ inputs.promotion == false }}
        id: create_gh_release
        uses: softprops/action-gh-release@v1
        with:
          name: "Deployment ${{ steps.vars-after-raise.outputs.pkg_version }} of ${{ inputs.deployment_app_name }}"
          body: "Cluster: ${{ inputs.aws_cluster_name }} revision: ${{ steps.deploy.outputs.deployment_revision}}"
          tag_name: ${{ steps.vars-after-raise.outputs.pkg_version }}
          target_commitish: ${{ steps.commit.outputs.commit_id }}
          token: ${{ secrets.gh_token }}
          prerelease: true
          generate_release_notes: true

      
      - name: Get current job id
        if: always()
        shell: bash
        id: job_info
        run: |
          job_id=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs | jq -r '.jobs | .[0].id')
          job_html_url=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs | jq -r '.jobs | map(select(.name | contains("${{ github.job }}"))) | .[0].html_url')
          echo "$job_id"
          echo "$job_html_url"
          echo "job_url=$job_html_url" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Prepare slack variables
        if: always()
        id: pre_slack_result
        run: |
          if [ "${{ inputs.promotion }}" == "false" ] ; then
            MESSAGE=":white_check_mark: Deployment of ${{ inputs.deployment_app_name }} version:$(cat version) successfull (Attempt: #${{ github.run_attempt }}). Cluster: ${{ inputs.aws_cluster_name }} revision: ${{ steps.deploy.outputs.deployment_revision}} \n Check deployment notes: ${{ steps.create_gh_release.outputs.url }}"
            MESSAGE_ERR=":x: Deployment of ${{ inputs.deployment_app_name }} failed (Attempt: #${{ github.run_attempt }})"
          else
            MESSAGE=":white_check_mark: (Promoting to production) Deployment of ${{ inputs.deployment_app_name }} version:$(cat version) successfull (Attempt: #${{ github.run_attempt }}). Cluster: ${{ inputs.aws_cluster_name }} revision: ${{ steps.deploy.outputs.deployment_revision}}"
            MESSAGE_ERR=":x: (Promoting to production) Deployment of ${{ inputs.deployment_app_name }} version:$(cat version) failed (Attempt: #${{ github.run_attempt }})"
          fi
          echo "msg=${MESSAGE}" >> $GITHUB_OUTPUT
          echo "msg_error=${MESSAGE_ERR}\n  Details: ${{ steps.job_info.outputs.job_url }}" >> $GITHUB_OUTPUT

      - name: Slack message success
        uses: archive/github-actions-slack@master
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.slack_token_id }}
          slack-channel: ${{ inputs.deployment_slack_channel }}
          slack-text: ${{ steps.pre_slack_result.outputs.msg }}

      - name: Slack message failure
        uses: archive/github-actions-slack@master
        if: failure()
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.slack_token_id }}
          slack-channel: ${{ inputs.deployment_slack_channel }}
          slack-text: ${{ steps.pre_slack_result.outputs.msg_error }}

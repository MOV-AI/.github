name: Build Packer images
on:
  workflow_call:
    inputs:
        product_name:
          required: true
          type: string
        branch_name:
          required: true
          type: string
        ros_distro:
          required: true
          type: string
    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true

env:
  CI_INTEGRATION_SCRIPTS_VERSION: '2.1.0.13'
  GITHUB_API_USR: 'OttoMation-Movai'
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  REGISTRY: registry.cloud.mov.ai


jobs:
  Validate-boostrap-configs:
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate Manifest
      shell: bash
      run: |
            apt install -y yamllint
            yamllint product-manifest.yaml
    
    - name: Bootstraping simulator metadata
      run: |
          python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed
          rm -rf simulator_artifacts ci_artifacts

          integration-pipeline merge_manifest_dependency \
                --dependency_name product-platform \
                --gh_api_user $GITHUB_API_USR \
                --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
                --auto_fetch

          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product-dependencies \
                --product_name ${{ inputs.product_name }} \
                --branch ${{ inputs.branch_name }} \
                --update_simulator \
                --docker_registry $REGISTRY

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts

    - name: Stash sim_configs
      uses: actions/upload-artifact@v2
      with:
        name: sim_configs
        path: simulator_artifacts/*

    - name: raise
      run: |
            rm -rf simulator_artifacts ci_artifacts
            mkdir platform_configs
            integration-pipeline raise
            cp product.version ./platform_configs/product.version
            cp product-manifest.yaml ./platform_configs/product-manifest.yaml

    - name: Stash raised_meta
      uses: actions/upload-artifact@v2
      with:
        name: raised_meta
        path: platform_configs/*

  Build-Spawner:
    needs: [Validate-boostrap-configs]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download a single artifact
      uses: actions/download-artifact@v2
      with:
        name: raised_meta
        path: platform_configs

    - name: Generate product configs from manifest
      shell: bash
      run: |
            cp ./platform_configs/product.version product.version
            cp ./platform_configs/product-manifest.yaml product-manifest.yaml
            python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed
            export PATH="$HOME/.local/bin:$PATH"
            cat product-manifest.yaml
            integration-pipeline generate_meta_artifacts --update_simulator --override_spawner ${{ inputs.product_name }} --manifest_platform_base_key "product-dependencies"
    
    - name: Stash manifest
      uses: actions/upload-artifact@v2
      with:
        name: manifest
        path: product-manifest.yaml

    - name: Lint docker image
      shell: bash
      run: |
            wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            ./hadolint-Linux-x86_64 docker/${{ matrix.distro }}/Dockerfile -t error
    
    - name: Login to Private Registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.registry_user }}
        password: ${{ secrets.registry_password }}
        registry: $REGISTRY

    - name: Prepare task variables
      id: pre_build
      run: |
            echo ::set-output name=base_name::$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)  
            echo ::set-output name=base_version::$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)
            echo ::set-output name=raised_version::$(cat product.version) 
            

    - name: Build with args and push:${{ inputs.deploy }}
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        file: docker/${{ matrix.distro }}/Dockerfile
        push: false
        tags: "$REGISTRY/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ steps.pre_build.outputs.raised_version }}"
        pull: true
        build-args: |
          DOCKER_REGISTRY=$REGISTRY
          BASE_IMAGE=${{ steps.pre_build.outputs.base_name }} 
          TAG=${{ steps.pre_build.outputs.base_version }} 
          CI_SCRIPT_VERSION=$CI_INTEGRATION_SCRIPTS_VERSION
  
  Build-Simulator:
    needs: [Validate-boostrap-configs]
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate Manifest
      shell: bash
      run: |
            cat product-manifest.yaml

  publish:
    needs: [Build-Spawner, Build-Simulator]
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate Manifest
      shell: bash
      run: |
            cat product-manifest.yaml
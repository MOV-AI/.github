name: Build and pack Ros packages 
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      aws_sqs_rosdep_access_key:
        required: true
      aws_sqs_rosdep_secret_access_key:
        required: true
      github_token:
        required: true
      sonar_token:
        required: true

jobs:
  Test-Ros-Component:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.cloud.mov.ai/devops/ros-buildtools-melodic:main
      options: --user root
      credentials:
        username: ${{secrets.registry_user}} 
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout    
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Validate Repository Package.xml
      run: |
        expected_url="<url>$GITHUB_SERVER_URL/$GITHUB_REPOSITORY</url>"
        VALIDATION_FILE="/tmp/verification-failed"
        find -L ./ -type f -name 'package.xml' -exec sh -c '

        search_result=$(cat $0 | grep "$1")
        is_movai_package=$(cat $0 | grep "<name>movai_")

        # is movai package ?
        if [ -n "$is_movai_package" ]:
        then  
          if [ -z "$search_result" ]:
          then
              echo "\e[31m$0"
              touch $2
          fi 
        fi

        ' {} $expected_url $VALIDATION_FILE \;

        if [ -f $VALIDATION_FILE ];
        then    
            echo "\e[31mPlease add \033[0;36m$expected_url \e[31mto all the package.xmls mentioned above!"
            exit 1
        fi 

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v1.0.0
      env:
        SONAR_TOKEN: ${{ secrets.sonar_token }}
        SONAR_HOST_URL: https://sonarqube.aws.cloud.mov.ai
      with:
        projectBaseDir: ./
        args: >
          -Dsonar.organization=MOV-AI
          -Dsonar.projectKey=${{ github.event.repository.name }}
          -Dsonar.verbose=true
          -Dsonar.sources=.
          -Dsonar.scm.provider=git
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300

    - name: Link to SonarQube Dashboard
      shell: bash
      run: |
        echo "Please check report here: https://sonarqube.aws.cloud.mov.ai/dashboard?id=${{ github.event.repository.name }}"
      id: sonar_links

    - name: Install Mobros
      run: python3 -m pip install mobros==1.0.1.8 

    - name: Setup link to Ros userspace
      run: |
        mkdir /opt/mov.ai/user/cache/ros/src/
        ln -s $(pwd)/* /opt/mov.ai/user/cache/ros/src/

    - name: DUARTE DELETE ME
      working-directory: /opt/mov.ai/user/cache/ros/src/
      run: |
            packages_xmls="$(find -L . -name package.xml | grep -E '^[.]\/\w+/package.xml')"

            packages_array=($(echo $packages_xmls | tr ' ' "\n"))
            nr_metapackages=0
            main_package=""

            # analyse root level packages. Not analysing sub directories of them! 
            for pkg_path in "${packages_array[@]}"
            do
                is_ros_metapackage $pkg_path
                if [ $IS_ROS_META_PKG -eq 0 ]
                then
                    ((nr_metapackages=nr_metapackages+1))
                    main_package=$pkg_path
                else
                    main_package_candidate=$pkg_path
                fi
            done
            
            # if no ros metapackage was found, and we passed the validations, it means i only have 1 root package and that will be my main for raise.
            if [ $nr_metapackages -eq 0 ]
            then
                main_package=$main_package_candidate
            fi
            echo "i think its $main_package"

    - name: Build
      run: mobros build 

    - name: Pack
      run: |
        export MOVAI_OUTPUT_DIR="$(pwd)/artifacts"
        mobros pack --workspace="$(pwd)" 

    - name: Print generated packages
      run: |
        ls -la artifacts

    - name: Print generated rosdep
      run: |
        cat /usr/local/rosdep/ros-pkgs.yaml


    - name: Commit raise version
      if: ${{ inputs.deploy == 'true' }}
      run: |
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git pull
        git add **package.xml
        git commit -m "Automatic Bump of build version"
        git push
    
    - name: Find package details
      id: vars
#      if: ${{ inputs.deploy == 'true' }}
      working-directory: /opt/mov.ai/user/cache/ros/src/
      run: |
            packages_xmls="$(find -L . -name package.xml | grep -E '^[.]\/\w+/package.xml')"

            packages_array=($(echo $packages_xmls | tr ' ' "\n"))
            nr_metapackages=0
            main_package=""

            # analyse root level packages. Not analysing sub directories of them! 
            for pkg_path in "${packages_array[@]}"
            do
                is_ros_metapackage $pkg_path
                if [ $IS_ROS_META_PKG -eq 0 ]
                then
                    ((nr_metapackages=nr_metapackages+1))
                    main_package=$pkg_path
                else
                    main_package_candidate=$pkg_path
                fi
            done
            
            # if no ros metapackage was found, and we passed the validations, it means i only have 1 root package and that will be my main for raise.
            if [ $nr_metapackages -eq 0 ]
            then
                main_package=$main_package_candidate
            fi
            echo "i think its $main_package"
            build_version_section=$(cat $main_package | grep build_version)
            version_section=$(cat $main_package | grep "<version")
            main_version=$(echo $version_section | sed 's/ //g' | sed -e 's/<\w*>'//g | sed -e 's/<\/\w*>'//g)
            buildid=$(echo $build_version_section | sed 's/ //g' | sed -e 's/<\w*>'//g | sed -e 's/<\/\w*>'//g)
            VERSION="$main_version-$buildid"
            echo ::set-output name=ros_pkg_version::$VERSION

    - name: Rosdep Publish
      if: ${{ inputs.deploy == 'true' }}
      run: |
        export AWS_DEFAULT_REGION="eu-west-1"
        export AWS_ACCESS_KEY_ID="${{ secrets.aws_sqs_rosdep_access_key }}"
        export AWS_SECRET_ACCESS_KEY='${{ secrets.aws_sqs_rosdep_secret_access_key }}'
        mobros publish
        cat /usr/local/rosdep/ros-pkgs.yaml


    - name: Publish to Nexus ppa-dev
      if: ${{ inputs.deploy == 'true' }}
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="ppa-dev"
          FILE_LOCATION=$(find artifacts/*.deb)
          find artifacts -type f -name '*.deb' -exec curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@{}" \
          "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/" \;
    
    - name: Publish to Nexus ppa-testing
      if: ${{ inputs.deploy == 'true' }}
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="ppa-testing"
          FILE_LOCATION=$(find artifacts/*.deb)
          find artifacts -type f -name '*.deb' -exec curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@{}" \
          "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/" \;

    - name: Create Github Release
      if: ${{ inputs.deploy == 'true' }}
      shell: bash
      run: |    
        title="Release of ${{ steps.vars.outputs.ros_pkg_version }}" 
        
        gh release create -p -t "$title" -n "Please add release notes" ${{ steps.vars.outputs.ros_pkg_version }}

        # add all files in the artifacts folder
        ls -la artifacts
        find artifacts -type f -exec gh release upload ${{ steps.vars.outputs.ros_pkg_version }} {} \;
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Release-Ros-Component:
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.cloud.mov.ai/devops/ros-buildtools-melodic:main
      options: --user root
      credentials:
        username: ${{secrets.registry_user}} 
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout    
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Set tag output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Fetch artifact from github release
      run: | 
        mkdir artifacts
        cd artifacts
        gh release download ${{ steps.vars.outputs.tag}} -p *.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to Nexus ppa-main
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="ppa-main"
          FILE_LOCATION=$(find artifacts/*.deb)
          find artifacts -type f -name '*.deb' -exec curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@{}" \
          "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/" \;
name: Build and pack FE packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      run_tests:
        required: false
        type: string
        default: 'true'
      npm_version:
        required: false
        type: string
        default: '16.x'
      prod_publish_repos:
        required: false
        type: string
        default: '["ppa-main"]'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true
      npm_token:
        required: true

jobs:
  Build:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/npm-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    env:
      NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.npm_token }}

    - name: Raise App version
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git config --global user.password ${{ secrets.auto_commit_pwd }}
        npm version prerelease --no-git-tag-version


    - name: Setup Github as proxy Registry
      uses: actions/setup-node@v2
      with:
        node-version: '${{ inputs.npm_version }}'
        registry-url: 'https://npm.pkg.github.com/mov-ai'

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')
        PACKAGE_NAME=$(cat package.json | grep name |head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')

        #echo ::set-output name=npm_pkg_name::$PACKAGE_NAME
        #echo ::set-output name=npm_pkg_version::$PACKAGE_VERSION
        echo "npm_pkg_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "npm_pkg_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT


    - name: Bump package.json metadata Version
      uses: deef0000dragon1/json-edit-action/@v1
      env:
        KEY: movai.Version
        VALUE: ${{steps.vars.outputs.npm_pkg_version}}
        FILE: package.json

    - name: Install dependencies
      run: npm ci --loglevel verbose

    - name: Build
      run: npm run build

    - name: Check NPM log on failure
      if: ${{ failure() }}
      run: cat /github/home/.npm/_logs/*.log

    - name: Run tests
      if: ${{ inputs.run_tests == 'true' }}
      run: npm run test

    - name: Run test coverage
      run: echo TODO

    - name: SonarQube Scan
      if: ${{ false }}
      uses: SonarSource/sonarqube-scan-action@v1.0.0
      env:
        SONAR_TOKEN: ${{ secrets.sonar_token }}
        SONAR_HOST_URL: https://sonarqube.aws.cloud.mov.ai
      with:
        projectBaseDir: ./
        args: >
          -Dsonar.organization=MOV-AI
          -Dsonar.projectKey=${{ github.event.repository.name }}
          -Dsonar.verbose=true
          -Dsonar.scm.provider=git
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300

    - name: Link to SonarQube Dashboard
      shell: bash
      run: |
        echo "Please check report here: https://sonarqube.aws.cloud.mov.ai/dashboard?id=${{ github.event.repository.name }}"
      id: sonar_links

    - name: Bump manifest.json metadata Version
      uses: deef0000dragon1/json-edit-action/@v1
      env:
        KEY: version
        VALUE: ${{steps.vars.outputs.npm_pkg_version}}
        FILE: build/manifest.json

    - name: Pack debian
      run: |
        dch -v ${{ steps.vars.outputs.npm_pkg_version }} -b -D "UNRELEASED" "bump version"
        dpkg-buildpackage && \
        mkdir artifacts && \
        cp ../*.deb artifacts

    - name: Print generated packages
      run: |
        ls -la artifacts

    - name: Publish npm
      if: ${{ inputs.deploy == 'true' }}
      run: npm publish

    - name: Archive binary
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: artifacts/*
        retention-days: 5


  Publish:
    if: ${{ inputs.deploy == 'true' }}
    runs-on: ubuntu-20.04
    needs:  [Build]
    container:
      image: registry.aws.cloud.mov.ai/devops/npm-buildserver:latest
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    permissions:
      contents: write # needed for publishing to github release
      packages: write # needed for package publishing
    env:
      NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.npm_token }}

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: artifacts

    - name: Publish to Nexus ppa-testing
      shell: bash
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="ppa-testing"

          for file in artifacts/*.deb
          do
            RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
            -H "Content-Type: multipart/form-data" \
            --data-binary "@$file" \
            -w '%{http_code}' \
            "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

            #retry
            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Retrying"

              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                -H "Content-Type: multipart/form-data" \
                --data-binary "@$file" \
                -w '%{http_code}' \
                "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
            fi

            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Exiting"
              exit 1
            fi

          done

    - name: Raise App version
      id: raise
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git config --global user.password ${{ secrets.auto_commit_pwd }}
        npm version prerelease -m "[skip actions] Automatic Bump of build version"
        git add package.*

    - name: Prepare raise variables
      id: pre_raise
      run: |
        #echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Raise App version
      uses: CasperWA/push-protected@v2.14.0
      with:
        token: ${{ secrets.auto_commit_pwd }}
        branch: ${{ steps.pre_raise.outputs.branch }}
        unprotect_reviews: true

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')
        PACKAGE_NAME=$(cat package.json | grep name |head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')

        #echo ::set-output name=npm_pkg_name::$PACKAGE_NAME
        #echo ::set-output name=npm_pkg_version::$PACKAGE_VERSION
        echo "npm_pkg_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "npm_pkg_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Commit info
      id: commit
      shell: bash
      run: |
        commit_hash=$(git log --format="%H" -n 1)
        #echo ::set-output name=commit_id::$commit_hash
        echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT

    - name: Grep manual release notes
      shell: bash
      run: |
        # contains more than one release ?
        if (( $(grep -o '# v' CHANGELOG.md | wc -l) > 1 )); then
          # use the latest release notes
          body=$(grep -m2 -A 9999 "# v" CHANGELOG.md | grep -B 9999 -m2 "# v" |sed '$ d')
        else
          body=$(cat CHANGELOG.md)
        fi

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Release of ${{ steps.vars.outputs.npm_pkg_version }}"
        body_path: CHANGELOG.md
        tag_name: ${{ steps.vars.outputs.npm_pkg_version }}
        target_commitish: ${{ steps.commit.outputs.commit_id }}
        token: ${{ secrets.gh_token }}
        prerelease: true
        generate_release_notes: true
        files: artifacts/*.deb

  Release:
    strategy:
      matrix:
        publish_repo: ${{ fromJSON(inputs.prod_publish_repos) }}
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/npm-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    env:
      NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1

    - name: Set tag output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir artifacts
        cd artifacts
        gh release download ${{ steps.vars.outputs.tag}} -p *.deb
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Publish to Nexus
      shell: bash
      run: |
            NEXUS_REPO="${{ matrix.publish_repo }}"
            if [ "$NEXUS_REPO" != "ppa-public" ]; then
              NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
            else
              NEXUS_ENDPOINT="artifacts.aws.cloud.mov.ai"
            fi

            for file in artifacts/*.deb
            do
              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
              -H "Content-Type: multipart/form-data" \
              --data-binary "@$file" \
              -w '%{http_code}' \
              "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

              #retry
              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Retrying"

                RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                  -H "Content-Type: multipart/form-data" \
                  --data-binary "@$file" \
                  -w '%{http_code}' \
                  "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
              fi

              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Exiting"
                exit 1
              fi

            done

name: Build Packer images
on:
  workflow_call:
    inputs:
      product_name:
        required: true
        type: string
      ros_distro:
        required: true
        type: string
      with_simulation:
        required: false
        type: string
        default: true
      is_external_project:
        required: false
        type: boolean
        default: false
      propagate_project:
        required: false
        type: boolean
        default: false

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true
      slack_token_id:
        required: true
      proxmox_api_url:
        required: true
      proxmox_api_token_id:
        required: true
      proxmox_api_token_secret:
        required: true
      ssh_pem_fleet_aws_vm:
        required: true


env:
  CI_INTEGRATION_SCRIPTS_VERSION: "2.2.0.7"
  MOBTEST_VERSION: "0.0.4.2"
  PACKAGE_DEPLOYER_VERSION: "1.0.0.25"
  GITHUB_API_USR: "OttoMation-Movai"
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  REGISTRY: registry.hel.mov.ai
  PUSH_REGISTRY: registry.cloud.mov.ai
  USERSPACE_FOLDER_PATH: userspace

jobs:
  Validate-boostrap-configs:
    runs-on: integration-pipeline
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Manifest
        shell: bash
        run: |
          apt install -y yamllint
          yamllint product-manifest.yaml

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Bootstraping simulator metadata
        run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${GITHUB_REF#refs/heads/} -- product.version
          cat product.version
          rm -rf simulator_artifacts ci_artifacts

          merge_manifest_args=" --dependency_name product-platform"
          merge_manifest_args="$merge_manifest_args --gh_api_user $GITHUB_API_USR"
          merge_manifest_args="$merge_manifest_args --gh_api_pwd ${{ secrets.auto_commit_pwd }}"
          merge_manifest_args="$merge_manifest_args --auto_fetch"

          if [ "${{ inputs.is_external_project }}" = "true" ];
          then
            merge_manifest_args="$merge_manifest_args --merge_sub_prod_dep_keys platform_config,platform_components,installion"
          fi

          if [ "${{ inputs.with_simulation }}" = "false" ];
          then
            merge_manifest_args="$merge_manifest_args --forward_sim"
          fi

          integration-pipeline merge_manifest_dependency $merge_manifest_args

          if [ "${{ inputs.with_simulation }}" = "true" ];
          then
          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product_dependencies \
                --product_name ${{ inputs.product_name }} \
                --branch ${GITHUB_REF#refs/heads/} \
                --update_simulator \
                --docker_registry $REGISTRY

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts
          fi

      - name: Stash sim_configs
        if: ${{ inputs.with_simulation == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: sim_configs
          path: simulator_artifacts/*

      - name: raise
        run: |
          rm -rf simulator_artifacts ci_artifacts
          mkdir platform_configs
          integration-pipeline raise
          cp product.version ./platform_configs/product.version
          cp product-manifest.yaml ./platform_configs/product-manifest.yaml

      - name: Stash raised_meta
        uses: actions/upload-artifact@v3
        with:
          name: raised_meta
          path: platform_configs/*

  Build-Spawner:
    needs: [Validate-boostrap-configs]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    outputs:
      raised_version: ${{ steps.pre_build.outputs.raised_version }}
    steps:
      - uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: unstash raised_meta
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: platform_configs

      - name: Generate product configs from manifest
        shell: bash
        run: |
          cp ./platform_configs/product.version product.version
          cp ./platform_configs/product-manifest.yaml product-manifest.yaml
          export PATH="$HOME/.local/bin:$PATH"
          cat product-manifest.yaml
          integration-pipeline generate_meta_artifacts --update_simulator --override_spawner ${{ inputs.product_name }} --manifest_platform_base_key "product_dependencies"

      - name: Stash manifest
        uses: actions/upload-artifact@v3
        with:
          name: manifest
          path: product-manifest.yaml

      - name: Lint docker image
        shell: bash
        run: |
          wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          ./hadolint-Linux-x86_64 docker/${{ matrix.distro }}/Dockerfile -t error

      - name: Login to ${{ env.REGISTRY }} Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.REGISTRY }}

      - name: Login to ${{ env.PUSH_REGISTRY }} Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.PUSH_REGISTRY }}

      - name: Prepare docker build variables
        id: pre_build
        run: |
          #echo ::set-output name=base_name::$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)
          #echo ::set-output name=base_version::$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)
          #echo ::set-output name=raised_version::$(cat product.version)
          echo "base_name=$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)" >> $GITHUB_OUTPUT
          echo "base_version=$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)" >> $GITHUB_OUTPUT
          echo "raised_version=$(cat product.version)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # - name: Docker build
      #   shell: bash
      #   run: |
      #     docker build --add-host ${{ env.REGISTRY }}:172.22.0.106 \
      #       --build-arg DOCKER_REGISTRY=${{ env.REGISTRY }} \
      #       --build-arg BASE_IMAGE=${{ steps.pre_build.outputs.base_name }} \
      #       --build-arg TAG=${{ steps.pre_build.outputs.base_version }} \
      #       --build-arg CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }} \
      #       --file docker/${{ matrix.distro }}/Dockerfile \
      #       --platform linux/amd64 \
      #       --tag ${{ env.PUSH_REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ steps.pre_build.outputs.raised_version }} \
      #       --pull \
      #       --push .


      - name: Stash robot_jsons_${{ matrix.distro }}
        uses: actions/upload-artifact@v3
        with:
          name: robot_jsons_${{ matrix.distro }}
          path: "*.json*"

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Install-Simulator-Robot:
    needs: [Build-Spawner]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline-simulation
    steps:
      - uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: unstash raised_meta
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: .

      - name: unstash manifest
        uses: actions/download-artifact@v3
        with:
          name: manifest
          path: .

      - name: unstash sim_configs
        uses: actions/download-artifact@v3
        with:
          name: sim_configs
          path: simulator_artifacts

      - name: unstash robot_jsons_${{ matrix.distro }}
        uses: actions/download-artifact@v3
        with:
          name: robot_jsons_${{ matrix.distro }}
          path: .

      - name: Install terraform
        shell: bash
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform -y

      - name: Setup terraform proxmox provisioner
        id: provision_infra_setup
        shell: bash
        run: |
          provision_infra_dir=provision_scripts
          provision_infra_version=0.1.0-1
          provision_infra_repo_name=devops-tf-proxmox-fleet

          rm -rf $provision_infra_dir
          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline fetch_by_tag --repo $provision_infra_repo_name --version $provision_infra_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $provision_infra_dir
          ls -la $provision_infra_dir
          echo "target_dir=${provision_infra_dir}/hosts/generic/" >> $GITHUB_OUTPUT

      - name: Define Instance names
        id: infra_names
        shell: bash
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/} | sed "s;\.;-;g" )

          local_manager_prefix="ip-$branch-standalone"
  
          echo "$local_manager_prefix"

          echo "simul_prefix=${local_manager_prefix}" >> $GITHUB_OUTPUT

      - name: Provision remote vms (Proxmox)
        working-directory: ${{ steps.provision_infra_setup.outputs.target_dir }}
        shell: bash
        run: |
          terraform init -backend-config="key=mary-standalone-${{ steps.infra_names.outputs.simul_prefix }}.tfstate"
          terraform plan
          terraform apply -auto-approve
        env:
          TF_VAR_number_agents: 0
          TF_VAR_proxmox_api_url: ${{ secrets.proxmox_api_url }}
          TF_VAR_proxmox_api_token_id: ${{ secrets.proxmox_api_token_id }}
          TF_VAR_proxmox_api_token_secret: ${{ secrets.proxmox_api_token_secret }}
          TF_VAR_provision_ssh_pem: ${{ secrets.ssh_pem_fleet_aws_vm }}
          TF_VAR_ip_list: '["dhcp"]'
          TF_VAR_storage: "local-lvm"
          TF_VAR_proxmox_host: "mary"
          TF_VAR_vm_gateway: "10.10.1.254"
          TF_VAR_ip_mask: 23
          TF_VAR_bios: "ovmf"
          TF_VAR_pool: "IP-Temp-VMs"
          TF_VAR_tags: "ip-simul-ci"
          TF_VAR_fleet_hosts_user: "devops"
          TF_VAR_template_name: "us20ci-gpu2"
          TF_VAR_fleet_manager_name: ${{ steps.infra_names.outputs.simul_prefix }}
          TF_VAR_fleet_manager_memory: 8192

      - name: Provision remote vms (Proxmox)
        working-directory: ${{ steps.provision_infra_setup.outputs.target_dir }}
        id: infra_outputs
        shell: bash
        run: |
          ip=$(terraform output manager_ip_address)
          user=$(terraform output user)
          echo "host_ip=$(echo $ip | sed "s;\";;g")" >> $GITHUB_OUTPUT
          echo "host_user=$(echo $user | sed "s;\";;g")" >> $GITHUB_OUTPUT
        
      - name: Test
        run: |
          ssh-keygen -f ~/.ssh/known_hosts -R ${{ steps.infra_outputs.outputs.host_ip }}
          ssh-keyscan -H ${{ steps.infra_outputs.outputs.host_ip }} >> ~/.ssh/known_hosts
          ssh ${{ steps.infra_outputs.outputs.host_user }}@${{ steps.infra_outputs.outputs.host_ip }} -i ${{ secrets.ssh_pem_fleet_aws_vm }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          ls -la
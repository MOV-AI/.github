name: Build Packer images
on:
  workflow_call:
    inputs:
        product_name:
          required: true
          type: string
        branch_name:
          required: true
          type: string
        ros_distro:
          required: true
          type: string
    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true

env:
  CI_INTEGRATION_SCRIPTS_VERSION: '2.1.0.13'
  MOBTEST_VERSION: '0.0.2.3'
  PACKAGE_DEPLOYER_VERSION: '1.0.0.21'
  GITHUB_API_USR: 'OttoMation-Movai'
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  REGISTRY: registry.cloud.mov.ai


jobs:
  Validate-boostrap-configs:
    runs-on: integration-pipeline
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate Manifest
      shell: bash
      run: |
            apt install -y yamllint
            yamllint product-manifest.yaml

    - name: Install CI Scripts 
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: Bootstraping simulator metadata
      run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${{ inputs.branch_name }} -- product.version
          cat product.version
          rm -rf simulator_artifacts ci_artifacts

          integration-pipeline merge_manifest_dependency \
                --dependency_name product-platform \
                --gh_api_user $GITHUB_API_USR \
                --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
                --auto_fetch

          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product-dependencies \
                --product_name ${{ inputs.product_name }} \
                --branch ${{ inputs.branch_name }} \
                --update_simulator \
                --docker_registry $REGISTRY

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts

    - name: Stash sim_configs
      uses: actions/upload-artifact@v2
      with:
        name: sim_configs
        path: simulator_artifacts/*

    - name: raise
      run: |
            rm -rf simulator_artifacts ci_artifacts
            mkdir platform_configs
            integration-pipeline raise
            cp product.version ./platform_configs/product.version
            cp product-manifest.yaml ./platform_configs/product-manifest.yaml

    - name: Stash raised_meta
      uses: actions/upload-artifact@v2
      with:
        name: raised_meta
        path: platform_configs/*

  Build-Spawner:
    needs: [Validate-boostrap-configs]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    steps:
    - uses: rtCamp/action-cleanup@master
    - name: Checkout
      uses: actions/checkout@v3

    - name: Agent info
      run: curl ipinfo.io/ip
    
    - name: Install CI Scripts 
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: unstash raised_meta
      uses: actions/download-artifact@v2
      with:
        name: raised_meta
        path: platform_configs

    - name: Generate product configs from manifest
      shell: bash
      run: |
            cp ./platform_configs/product.version product.version
            cp ./platform_configs/product-manifest.yaml product-manifest.yaml
            export PATH="$HOME/.local/bin:$PATH"
            cat product-manifest.yaml
            integration-pipeline generate_meta_artifacts --update_simulator --override_spawner ${{ inputs.product_name }} --manifest_platform_base_key "product-dependencies"
    
    - name: Stash manifest
      uses: actions/upload-artifact@v2
      with:
        name: manifest
        path: product-manifest.yaml

    - name: Lint docker image
      shell: bash
      run: |
            wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            ./hadolint-Linux-x86_64 docker/${{ matrix.distro }}/Dockerfile -t error
    
    - name: Login to Private Registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.registry_user }}
        password: ${{ secrets.registry_password }}
        registry: ${{ env.REGISTRY }} 

    - name: Prepare docker build variables
      id: pre_build
      run: |
            echo ::set-output name=base_name::$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)  
            echo ::set-output name=base_version::$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)
            echo ::set-output name=raised_version::$(cat product.version) 
            

    - name: Build with args and push:${{ inputs.deploy }}
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        file: docker/${{ matrix.distro }}/Dockerfile
        push: false
        tags: "${{ env.REGISTRY }}/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ steps.pre_build.outputs.raised_version }}"
        pull: true
        build-args: |
          DOCKER_REGISTRY=${{ env.REGISTRY }}
          BASE_IMAGE=${{ steps.pre_build.outputs.base_name }} 
          TAG=${{ steps.pre_build.outputs.base_version }} 
          CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}
  
    - name: Installation
      shell: bash
      run: |
            for robot in $(movai-cli robots list); do
              movai-cli robots stop $robot
              sleep 5
              movai-cli robots remove $robot
            done || true

            mkdir -p artifacts
            cp *.json artifacts/
            CONFIG_FILE_NAME=${{ inputs.product_name }}-${{ matrix.distro }}.json
            export PATH="$HOME/.local/bin:$PATH"
            integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version
            wget https://movai-scripts.s3.amazonaws.com/QuickStart.bash
            chmod +x ./QuickStart.bash
            ./QuickStart.bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME
            execution_status=$?
            exit $execution_status
            rm movai_service_version

    - name: Run mobtest
      shell: bash
      run: |
            container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
            docker exec -t "$container_id" bash -c '
              set -e
              export PATH="$HOME/.local/bin:$PATH"
              python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed
              mobtest proj /opt/ros/${{ matrix.distro }}/share/ || true
              '
    - name: Collect Installed components
      shell: bash
      run: |
            container_id=$(docker ps -q -f "ancestor=$REGISTRY/qa/${{ inputs.product_name }}-${{ matrix.distro }}:$(cat product.version)")
            docker exec -t "$container_id" bash -c '
              set -e
              sudo apt update
              export PATH="$HOME/.local/bin:$PATH"
              python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple movai-package-deployer==${{ env.PACKAGE_DEPLOYER_VERSION }} --ignore-installed
              package-deployer scan
              ls -la /tmp
            ' || true
              docker cp $container_id:/tmp/deployable.dploy artifacts/${{ inputs.product_name }}-${{ matrix.distro }}-deployable.dploy
              docker cp $container_id:/tmp/undeployable.dploy artifacts/${{ inputs.product_name }}-${{ matrix.distro }}-3rdParty.dploy
              CONFIG_FILE_NAME=${{ inputs.product_name }}-${{ matrix.distro }}.json

              echo "$REGISTRY/qa/${{ inputs.product_name }}-${{ matrix.distro }}:$(cat product.version)">artifacts/product-${{ matrix.distro }}.image.artifact
  
    - name: Push image
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        file: docker/${{ matrix.distro }}/Dockerfile
        push: true
        tags: "${{ env.REGISTRY }}/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ steps.pre_build.outputs.raised_version }}"
        pull: true
        build-args: |
          DOCKER_REGISTRY=${{ env.REGISTRY }}
          BASE_IMAGE=${{ steps.pre_build.outputs.base_name }} 
          TAG=${{ steps.pre_build.outputs.base_version }} 
          CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}

    - name: Stash deploy_artifacts_noetic
      uses: actions/upload-artifact@v2
      with:
        name: deploy_artifacts_noetic
        path: artifacts/*

  
  Build-Simulator:
    needs: [Validate-boostrap-configs]
    runs-on: integration-pipeline
    env:
      DISTRO: noetic
    steps:
    - uses: rtCamp/action-cleanup@master

    - name: Checkout
      uses: actions/checkout@v3

    - name: Install CI Scripts 
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: unstash sim_configs
      uses: actions/download-artifact@v2
      with:
        name: sim_configs
        path: simulator_artifacts

    - name: Prepare Skip variables
      id: pre_simulator_build
      run: |
            if [ ! -f "simulator_artifacts/version" ]; then
              echo ::set-output name=skip_simulator_build::"true"
            else
              echo ::set-output name=skip_simulator_build::"false"
            fi

    - name: Lint docker image
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      shell: bash
      run: |
            wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            ./hadolint-Linux-x86_64 docker/$DISTRO/Dockerfile-simulator -t error

    - name: Fetch artifacts
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      shell: bash
      run: |
            export PATH="$HOME/.local/bin:$PATH"
            integration-pipeline fetch_simulator_models \
            --manifest_platform_base_key product_components \
            --gh_api_user $GITHUB_API_USR \
            --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
            --target_dir "./models"

    - name: Login to Private Registry
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.registry_user }}
        password: ${{ secrets.registry_password }}
        registry: ${{ env.REGISTRY }} 

    - name: Prepare docker build variables
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      id: pre_build
      run: |
            echo ::set-output name=image_name::$(cat simulator_artifacts/simulator_name.ci)  
            echo ::set-output name=base_name::$(cat simulator_artifacts/simulator_base.ci)

    - name: Build with args and push:${{ inputs.deploy }}
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        file: docker/${{ env.DISTRO }}/Dockerfile-simulator
        push: false
        tags: "${{ env.REGISTRY }}/qa/${{ steps.pre_build.outputs.image_name }}"
        pull: true
        build-args: |
          BASE_IMAGE=${{ steps.pre_build.outputs.base_name }}
          CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}

    - name: Push image
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64
        file: docker/${{ env.DISTRO }}/Dockerfile-simulator
        push: true
        tags: "${{ env.REGISTRY }}/qa/${{ steps.pre_build.outputs.image_name }}"
        pull: true
        build-args: |
          BASE_IMAGE=${{ steps.pre_build.outputs.base_name }}
          CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}

    - name: Collect Installed components
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      shell: bash
      run: |
            export PATH="$HOME/.local/bin:$PATH"
            cd simulator_artifacts
            integration-pipeline publish_simulator_state_artifacts \
                  --product_name ${{ inputs.product_name }} \
                  --branch ${{ inputs.branch_name }}
    - name: pre-stash
      shell: bash
      run: |
            echo "$REGISTRY/qa/$(cat simulator_artifacts/simulator_name.ci)" > simulator.image.artifact

    - name: Stash deploy_simulator_artifacts
      uses: actions/upload-artifact@v2
      with:
        name: deploy_simulator_artifacts
        path: simulator.image.artifact

  publish:
    needs: [Build-Spawner, Build-Simulator]
    runs-on: integration-pipeline
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: unstash raised_meta
      uses: actions/download-artifact@v2
      with:
        name: raised_meta
        path: platform_configs
    - name: unstash deploy_artifacts_noetic
      uses: actions/download-artifact@v2
      with:
        name: deploy_artifacts_noetic
        path: artifacts
    - name: unstash manifest
      uses: actions/download-artifact@v2
      with:
        name: manifest
        path: .
    - name: unstash deploy_simulator_artifacts
      uses: actions/download-artifact@v2
      with:
        name: deploy_simulator_artifacts
        path: .

    - name: Install CI Scripts 
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: Install Package Deployer
      shell: bash
      run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

    - name: Publish and create release
      shell: bash
      run: |
            git config --global --add safe.directory $(pwd)
            git config --global user.name '${{ secrets.auto_commit_user }}'
            git config --global user.email '${{ secrets.auto_commit_mail }}'
            git config --global user.password ${{ secrets.auto_commit_pwd }}

            cp ./platform_configs/product.version product.version
            cp ./platform_configs/product-manifest.yaml product-manifest.yaml
            mkdir -p deployment_artifacts

            export PATH="$HOME/.local/bin:$PATH"
            ls -la
            mkdir -p pkgs_deployable
            cp artifacts/*deployable.dploy pkgs_deployable
            package-deployer join --dploy_workspace "$(pwd)/pkgs_deployable"
            mv "$(pwd)/pkgs_deployable/merged.dploy" deployment_artifacts/deployable.dploy

            mkdir -p pkgs_undeployable
            cp artifacts/*3rdParty.dploy pkgs_undeployable
            package-deployer join --dploy_workspace "$(pwd)/pkgs_undeployable"
            mv "$(pwd)/pkgs_undeployable/merged.dploy" deployment_artifacts/3rdParty.dploy

            rm -rf pkgs_deployable pkgs_undeployable

            cp artifacts/*.json deployment_artifacts
            echo -e "$(cat ./artifacts/product-noetic.image.artifact)\n$(cat ./simulator.image.artifact)" > deployment_artifacts/product.image.artifact
            cp deployment_artifacts/product.image.artifact ./

            integration-pipeline patch_manifest_with_spawner
            cat product-manifest.yaml
            cp product-manifest.yaml deployment_artifacts

            product_version=$(cat product.version)
            
            git add product.version
            git commit -m "Automatic Raise"
            git pull || echo "$product_version" > product.version && git add product.version && git commit -m "Automatic Raise"
            git push origin HEAD:${{ inputs.branch_name }}
            commit_hash=$(git log --format="%H" -n 1)
            gh release create -p --generate-notes --target "$commit_hash" -t "${{ inputs.product_name }} $product_version" $product_version
            # add all files in the deployment_artifacts folder
            find deployment_artifacts -type f -exec gh release upload $product_version {} \;
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}
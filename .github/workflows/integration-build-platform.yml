name: Build Packer images
on:
  workflow_call:
    inputs:
        product_name:
          required: true
          type: string
        ros_distro:
          required: true
          type: string
        continue_on_mobtest_error:
          required: false
          type: boolean
          default: false

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true
      slack_token_id:
        required: true
      ssh_pem_fleet_aws_vm:
        required: true

env:
  CI_INTEGRATION_SCRIPTS_VERSION: '2.1.0.15'
  MOBTEST_VERSION: '0.0.2.3'
  PACKAGE_DEPLOYER_VERSION: '1.0.0.21'
  GITHUB_API_USR: 'OttoMation-Movai'
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  AWS_DEFAULT_REGION: 'us-east-1'
  REGISTRY: registry.cloud.mov.ai

jobs:
  Validate-boostrap-configs:
    runs-on: integration-pipeline
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate Manifest
      shell: bash
      run: |
            apt install -y yamllint
            yamllint product-manifest.yaml

    - name: Install CI Scripts
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: Bootstraping simulator metadata
      run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${GITHUB_REF#refs/heads/} -- product.version
          cat product.version
          rm -rf simulator_artifacts ci_artifacts

          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product_components \
                --product_name ${{ inputs.product_name }} \
                --branch ${GITHUB_REF#refs/heads/}

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts

    - name: Bootstraping platform metadata
      run: |
          integration-pipeline generate_meta_artifacts \
                --manifest_platform_base_key product_components

    - name: Stash robot_configs
      uses: actions/upload-artifact@v2
      with:
        name: robot_configs
        path: "*.json*"

    - name: Stash sim_configs
      uses: actions/upload-artifact@v2
      with:
        name: sim_configs
        path: simulator_artifacts/*

    - name: raise
      run: |
            rm -rf simulator_artifacts ci_artifacts platform_configs
            mkdir platform_configs
            integration-pipeline raise
            cp product.version ./platform_configs/product.version
            cp product-manifest.yaml ./platform_configs/product-manifest.yaml

    - name: Stash raised_meta
      uses: actions/upload-artifact@v2
      with:
        name: raised_meta
        path: platform_configs/*

  Standalone-Validations:
    if: ${{ false }}
    needs: [Validate-boostrap-configs]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    steps:
    - uses: rtCamp/action-cleanup@master
    - name: Checkout
      uses: actions/checkout@v3

    - name: Agent info
      id: agent_info
      run: |
            ip=$(hostname -I | awk '{print $1}')
            echo ::set-output name=ip::$ip

    - name: Install CI Scripts
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: unstash robot_configs
      uses: actions/download-artifact@v2
      with:
        name: robot_configs
        path: .

    - name: Patch robot_configs *.ci with the right full path
      shell: bash
      run: |
            find -L . -type f -name '*.json.ci' -exec \
              sed -i "s;/__w;$(pwd)/../..;g" {} \
             \;

    - name: Setup QA UI tests
      id: ui_tests_setup
      shell: bash
      run: |
            qa_key=ui_tests

            rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
            tests_dir=$(cat /tmp/target_dir.txt)
            tests_version=$(cat /tmp/version.txt)
            tests_repo_name=$(cat /tmp/repo_name.txt)

            rm -rf $tests_repo_name
            integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
            ls -la $tests_dir
            echo ::set-output name=target_dir::$tests_dir

    - name: Setup QA install tests
      id: install_tests_setup
      shell: bash
      run: |
            qa_key=install_tests

            rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
            tests_dir=$(cat /tmp/target_dir.txt)
            tests_version=$(cat /tmp/version.txt)
            tests_repo_name=$(cat /tmp/repo_name.txt)

            rm -rf $tests_repo_name
            integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
            ls -la $tests_dir
            echo ::set-output name=target_dir::$tests_dir

    - name: Setup QA API tests
      id: api_tests_setup
      shell: bash
      run: |
            qa_key=api_tests

            rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
            tests_dir=$(cat /tmp/target_dir.txt)
            tests_version=$(cat /tmp/version.txt)
            tests_repo_name=$(cat /tmp/repo_name.txt)

            rm -rf $tests_repo_name
            integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
            ls -la $tests_dir
            echo ::set-output name=target_dir::$tests_dir

    - name: Setup QA Flow tests
      id: flow_tests_setup
      shell: bash
      run: |
            qa_key=flow_tests

            rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
            tests_dir=$(cat /tmp/target_dir.txt)
            tests_version=$(cat /tmp/version.txt)
            tests_repo_name=$(cat /tmp/repo_name.txt)

            rm -rf $tests_repo_name
            integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
            ls -la $tests_dir
            echo ::set-output name=target_dir::$tests_dir
            echo ::set-output name=version::$tests_version

    - name: Install tests
      id: install
      working-directory: ${{ steps.install_tests_setup.outputs.target_dir }}
      shell: bash
      run: | 
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            rm -rf results/*
            pytest --repository_user=${{secrets.registry_user}} --repository_token=${{secrets.registry_password}} --configFileTest --installPath="." --jsonConfigFilePath="../basic-standalone-noetic.json.ci"
            deactivate
            rm -R venv

            user=$(cat results/credentials.txt | awk -F: '{print $1}')
            pwd=$(cat results/credentials.txt | awk -F: '{print $2}')
            echo ::set-output name=movai_user::$user
            echo ::set-output name=movai_pwd::$pwd

    - name: Run mobtest
      continue-on-error: ${{ inputs.continue_on_mobtest_error }}
      shell: bash
      run: |
            container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
            docker exec -t "$container_id" bash -c '
              set -e
              export PATH="$HOME/.local/bin:$PATH"
              python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed
              mobtest proj /opt/ros/${{ matrix.distro }}/share/
              '

    - name: API tests
      working-directory: ${{ steps.api_tests_setup.outputs.target_dir }}
      shell: bash
      run: |
            echo "Movai user: ${{ steps.install.outputs.movai_user }}"
            echo "Movai password: ${{ steps.install.outputs.movai_pwd }}"
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install --upgrade pip
            pip install -r requirements.txt
            pytest src/tests \
                --base_url https://${{ steps.agent_info.outputs.ip }} \
                --username ${{ steps.install.outputs.movai_user }} \
                --password ${{ steps.install.outputs.movai_pwd }}
            deactivate
            rm -R venv

    - name: UI tests
      working-directory: ${{ steps.ui_tests_setup.outputs.target_dir }}
      shell: bash
      run: |
            echo "Movai user: ${{ steps.install.outputs.movai_user }}"
            echo "Movai password: ${{ steps.install.outputs.movai_pwd }}"

            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install --upgrade pip
            pip install -r requirements.txt
            pytest -s \
              --hub_url http://172.22.0.105:4444 \
              --browser_name chrome \
              --browser_version 91.0 \
              --base_url https://${{ steps.agent_info.outputs.ip }}/ \
              --username ${{ steps.install.outputs.movai_user }} \
              --password ${{ steps.install.outputs.movai_pwd }} \
              --tb=short
            deactivate
            rm -R venv

    - name: Flow tests
      working-directory: ${{ steps.flow_tests_setup.outputs.target_dir }}
      shell: bash
      run: |
            container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
            docker exec -t "$container_id" bash -c '
              sudo apt update
              sudo apt install -y ros-noetic-movai-qa-node-params=${{ steps.flow_tests_setup.outputs.version }}
            '
            echo "Movai user: ${{ steps.install.outputs.movai_user }}"
            echo "Movai password: ${{ steps.install.outputs.movai_pwd }}"

            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install --upgrade pip
            pip install -r requirements.txt
            pytest -s \
              --movai-user ${{ steps.install.outputs.movai_user }} \
              --movai-pw ${{ steps.install.outputs.movai_pwd }} \
              --tb=short
            deactivate
            rm -R venv

    - name: Collect Installed components
      shell: bash 
      run: |
            mkdir -p artifacts
            used_images=($(docker images --format "{{.Repository}}:{{.Tag}}" | tr ' ' "\n"))
            for image in "${used_images[@]}"
            do
              image_short_name=$(grep -oP "(?<=/$ENV/).*?(?=:)" <<< "$image")
              if [[ "$image_short_name" =~ .*"backend".* || "$image_short_name" =~ .*"spawner".* || "$image_short_name" =~ .*"redis*".* || "$image_short_name" =~ .*"health-node".* ]];
              then
                echo "scanning $image"
                container_ids=($(docker ps -q -f "ancestor=$image" | tr ' ' "\n"))
                for container_id in "${container_ids[@]}"
                do
                  container_name=$(docker inspect --format="{{.Name}}" $container_id)
                  docker exec -t "$container_id" bash -c '
                    set -e

                    sudo apt update || apt update
                    export PATH="$HOME/.local/bin:$PATH"
                    python3 -m pip install --upgrade pip || wget https://bootstrap.pypa.io/get-pip.py -O - | python3
                    python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple movai-package-deployer=='$PACKAGE_DEPLOYER_VERSION'
                    package-deployer scan
                    ls -la /tmp
                  ' || true
                    docker cp $container_id:/tmp/deployable.dploy artifacts/$container_name-${{ matrix.distro }}-deployable.dploy
                    docker cp $container_id:/tmp/undeployable.dploy artifacts/$container_name-${{ matrix.distro }}-3rdParty.dploy
                done
              else
                echo "Skipping scan of $image"
              fi
            done
            python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple movai-package-deployer==$PACKAGE_DEPLOYER_VERSION
            export PATH="$HOME/.local/bin:$PATH"
            package-deployer scan
            cp /tmp/deployable.dploy artifacts/host-${{ matrix.distro }}-deployable.dploy
            cp /tmp/undeployable.dploy artifacts/host-${{ matrix.distro }}-3rdParty.dploy

    - name: Stash deploy_artifacts_${{ matrix.distro }}
      uses: actions/upload-artifact@v2
      with:
        name: Stash deploy_artifacts_${{ matrix.distro }}
        path: artifacts/*.dploy

  Fleet-Validations:
    needs: [Validate-boostrap-configs]
    runs-on: integration-pipeline
    steps:
    - uses: rtCamp/action-cleanup@master
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Install CI Scripts
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed
    
    - name: unstash robot_configs
      uses: actions/download-artifact@v2
      with:
        name: robot_configs
        path: .

    - name: Provision remote vms
      shell: bash
      run: |
              mkdir aws_artifacts
              python3 -m pip install awscli
              cd staging
              export PATH="$HOME/.local/bin:$PATH"
              export product="platform"
              export version="$PRODUCT_RELEASE_VERSION"
              ./ec2_provision.sh
              cp -vf infra_ids.txt ../aws_artifacts/

    - name: Stash ci_infra_artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ci_infra_artifacts
        path: aws_artifacts/*

    - name: Setup ansible installation
      id: ansible_install_setup
      shell: bash
      run: |
            install_key=ansible_deploy

            rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.installion.$install_key.target_dir --output_file /tmp/target_dir.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.installion.$install_key.version --output_file /tmp/version.txt
            integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.installion.$install_key.name --output_file /tmp/repo_name.txt
            install_infra_dir=$(cat /tmp/target_dir.txt)
            install_infra_version=$(cat /tmp/version.txt)
            install_infra_repo_name=$(cat /tmp/repo_name.txt)

            rm -rf $install_infra_repo_name
            integration-pipeline fetch_by_tag --repo $install_infra_repo_name --version $install_infra_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $install_infra_dir
            ls -la $install_infra_dir
            echo ::set-output name=target_dir::$install_infra_dir

    - name: Ansible install platform
      working-directory: ${{ steps.ansible_install_setup.outputs.install_infra_dir }}
      shell: bash
      run: |
              echo "${{ secrets.ssh_pem_fleet_aws_vm }}" > ~/.ssh/aws_slave.pem
              python3 -m venv ansible-venv
              source ansible-venv/bin/activate
              python3 -m pip install -r requirements.txt
              ansible-galaxy collection install -r requirements.yml
              ansible-playbook install.yml -i ../staging/hosts --key-file ~/.ssh/aws_slave.pem --extra-vars=@"$WORKSPACE"/product-manifest.yaml -e fleet_domain_dns="" -e "{\"proxycerts__remote_redis_servers_fqn\": [$(cat ../staging/manager_private_ip.txt)]}" --skip-tags ufw
              execution_status=$?
              deactivate
              exit $execution_status

    - name: Teardown remote vms
      if: always()
      shell: bash
      run: |
              echo "Deleting $(cat aws_artifacts/infra_ids.txt)"
              python3 -m pip install awscli
              export PATH="$HOME/.local/bin:$PATH"
              aws ec2 terminate-instances --instance-ids $(cat aws_artifacts/infra_ids.txt)                        
              echo "Deleting $(cat aws_artifacts/infra_ids.txt)"
              python3 -m pip install awscli
              export PATH="$HOME/.local/bin:$PATH"
              aws ec2 terminate-instances --instance-ids $(cat aws_artifacts/infra_ids.txt)
  Build-Simulator:
    if: ${{ false }}
    needs: [Validate-boostrap-configs]
    runs-on: integration-pipeline
    steps:
    - uses: rtCamp/action-cleanup@master
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Install CI Scripts
      shell: bash
      run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

    - name: unstash sim_configs
      uses: actions/download-artifact@v2
      with:
        name: sim_configs
        path: simulator_artifacts

    - name: Prepare Skip variables
      id: pre_simulator_build
      run: |
            if [ ! -f "simulator_artifacts/version" ]; then
              echo ::set-output name=skip_simulator_build::"true"
            else
              echo ::set-output name=skip_simulator_build::"false"
            fi

    - name: Lint docker image
      if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' }}
      shell: bash
      run: |
            wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            ./hadolint-Linux-x86_64 docker/$DISTRO/Dockerfile-simulator -t error

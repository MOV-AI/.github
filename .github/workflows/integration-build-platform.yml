name: Build Packer images
on:
  workflow_call:
    inputs:
      product_name:
        required: true
        type: string
      ros_distro:
        required: true
        type: string
      continue_on_mobtest_error:
        required: false
        type: boolean
        default: false
      debug_fleet_keep_alive:
        required: false
        type: boolean
      fleet_ips:
        required: true
        type: string
      fleet_number_members:
        required: true
        type: number

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true
      slack_token_id:
        required: true
      ssh_pem_fleet_aws_vm:
        required: true
      proxmox_api_token_id:
        required: true
      proxmox_api_token_secret:
        required: true
      jira_username:
        required: true
      jira_password:
        required: true
      xray_clientid:
        required: true
      xray_secret:
        required: true
env:
  CI_INTEGRATION_SCRIPTS_VERSION: "2.1.0.23"
  MOBTEST_VERSION: "0.0.4.1"
  PACKAGE_DEPLOYER_VERSION: "1.0.0.24"
  GITHUB_API_USR: "OttoMation-Movai"
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  AWS_DEFAULT_REGION: "us-east-1"
  REGISTRY: registry.cloud.mov.ai
  ENV: qa
  USERSPACE_FOLDER_PATH: userspace
  SIMULATION_ID: ci_simulation
  XRAY_CLIENTID: ${{ secrets.xray_clientid}}
  XRAY_SECRET: ${{ secrets.xray_secret}}
  JIRA_USERNAME: ${{ secrets.jira_username}}
  JIRA_PASSWORD: ${{ secrets.jira_password}}

jobs:
  Validate-boostrap-configs:
    runs-on: integration-pipeline
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Manifest
        shell: bash
        run: |
          apt install -y yamllint
          yamllint product-manifest.yaml

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Bootstraping simulator metadata
        run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${GITHUB_REF#refs/heads/} -- product.version
          cat product.version
          rm -rf simulator_artifacts ci_artifacts

          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product_components \
                --product_name ${{ inputs.product_name }} \
                --branch ${GITHUB_REF#refs/heads/}

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts

      - name: Bootstraping platform metadata
        run: |
          integration-pipeline generate_meta_artifacts \
                --manifest_platform_base_key product_components

      - name: Stash robot_configs
        uses: actions/upload-artifact@v2
        with:
          name: robot_configs
          path: "*.json*"

      - name: Stash sim_configs
        uses: actions/upload-artifact@v2
        with:
          name: sim_configs
          path: simulator_artifacts/*

      - name: raise
        run: |
          rm -rf simulator_artifacts ci_artifacts platform_configs
          mkdir platform_configs
          integration-pipeline raise
          cp product.version ./platform_configs/product.version
          cp product-manifest.yaml ./platform_configs/product-manifest.yaml

      - name: Stash raised_meta
        uses: actions/upload-artifact@v2
        with:
          name: raised_meta
          path: platform_configs/*

  Standalone-Validations:
    runs-on: ubuntu-20.04
    needs: [Validate-boostrap-configs]
    steps:
      - name: Pass through
        run: echo "Pass"

  Validation-UI-Tests:
    needs: [Standalone-Validations]
    runs-on: integration-pipeline
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: unstash robot_configs
        uses: actions/download-artifact@v2
        with:
          name: robot_configs
          path: .

      - name: Patch robot_configs *.ci with the right full path
        shell: bash
        run: |
          find -L . -type f -name '*.json.ci' -exec \
            sed -i "s;/__w;$(pwd)/../..;g" {} \
           \;

      - name: Setup QA UI tests
        id: ui_tests_setup
        shell: bash
        run: |
          qa_key=ui_tests

          rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt /tmp/jira_report.txt /tmp/test_set.txt

          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.jira_report --output_file /tmp/jira_report.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.test_set --output_file /tmp/test_set.txt

          tests_dir=$(cat /tmp/target_dir.txt)
          tests_version=$(cat /tmp/version.txt)
          tests_repo_name=$(cat /tmp/repo_name.txt)
          jira_report=$(cat /tmp/jira_report.txt)
          test_set=$(cat /tmp/test_set.txt)

          rm -rf $tests_repo_name

          integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
          ls -la $tests_dir

          echo ::set-output name=target_dir::$tests_dir
          echo ::set-output name=jira_report::$jira_report
          echo ::set-output name=test_set::$test_set

          # setup venv in a step that is always executed
          pushd "${tests_dir}"
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
          popd

      - name: Feature File Validation
        id: feature_file_ui
        working-directory: ${{ steps.ui_tests_setup.outputs.target_dir }}
        if: steps.ui_tests_setup.outputs.jira_report == 'True'
        shell: bash
        run: |
          . venv/bin/activate

          python3 testcasemanagement/testcase_importer.py --target "${{ steps.ui_tests_setup.outputs.test_set }}"
          python3 testcasemanagement/feature_file_processor.py --validate

          deactivate

      - name: Prepare QA Feature File Validation slack message
        if: always()
        id: pre_slack
        run: |
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is unstable :rain_cloud: \
          UI tests feature file validation: ${{ steps.feature_file_ui.outcome }} \
          Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo ::set-output name=msg_error::$MESSAGE_ERR

      - name: Slack message failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C02PB9A9F45"
          slack-message: ${{ steps.pre_slack.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Install
        id: install
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

          rm -rf artifacts
          mkdir -p artifacts
          cp *.json artifacts/

          CONFIG_FILE_NAME="basic-standalone-noetic.json"
          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key quickstart_version --output_file quickstart_version

          wget https://movai-scripts.s3.amazonaws.com/QuickStart_$(cat quickstart_version).bash
          chmod +x ./QuickStart_$(cat quickstart_version).bash
          ./QuickStart_$(cat quickstart_version).bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME

          MOVAI_USER="ci"
          MOVAI_PWD="4Iva6UHAQq9DGITj"
          for robot in $(movai-cli robots list); do
            movai-cli robots user "$robot" "$MOVAI_USER" "$MOVAI_PWD"
          done

          echo ::set-output name=movai_user::$MOVAI_USER
          echo ::set-output name=movai_pwd::$MOVAI_PWD

      - name: UI tests
        timeout-minutes: 120
        working-directory: ${{ steps.ui_tests_setup.outputs.target_dir }}
        shell: bash
        run: |
          . venv/bin/activate

          pytest -k 'UI_Automation' -s \
            --cucumberjson='results/reports/result.json' \
            --hub_url http://172.22.0.105:4444 \
            --browser_name chrome \
            --browser_version 91.0 \
            --base_url https://${{ steps.agent_info.outputs.ip }}/ \
            --username ${{ steps.install.outputs.movai_user }} \
            --password ${{ steps.install.outputs.movai_pwd }} \
            --jira_report FALSE \
            --tb=short

          deactivate
          rm -R venv

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Validation-Install-Tests:
    needs: [Standalone-Validations]
    runs-on: integration-pipeline
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: unstash robot_configs
        uses: actions/download-artifact@v2
        with:
          name: robot_configs
          path: .

      - name: Patch robot_configs *.ci with the right full path
        shell: bash
        run: |
          find -L . -type f -name '*.json.ci' -exec \
            sed -i "s;/__w;$(pwd)/../..;g" {} \
           \;

      - name: Setup QA install tests
        id: install_tests_setup
        shell: bash
        run: |
          qa_key=install_tests

          rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt /tmp/jira_report.txt /tmp/test_set.txt

          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.jira_report --output_file /tmp/jira_report.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.test_set --output_file /tmp/test_set.txt

          tests_dir=$(cat /tmp/target_dir.txt)
          tests_version=$(cat /tmp/version.txt)
          tests_repo_name=$(cat /tmp/repo_name.txt)
          jira_report=$(cat /tmp/jira_report.txt)
          test_set=$(cat /tmp/test_set.txt)

          rm -rf $tests_repo_name
          integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
          ls -la $tests_dir

          echo ::set-output name=target_dir::$tests_dir
          echo ::set-output name=jira_report::$jira_report
          echo ::set-output name=test_set::$test_set

          # setup venv in a step that is always executed
          pushd "${tests_dir}"
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
          popd

      - name: Feature File Validation
        id: feature_file_install
        working-directory: ${{ steps.install_tests_setup.outputs.target_dir }}
        if: steps.install_tests_setup.outputs.jira_report == 'True'
        shell: bash
        run: |
          . venv/bin/activate

          python3 testcasemanagement/testcase_importer.py --target "${{ steps.install_tests_setup.outputs.test_set }}"
          python3 testcasemanagement/feature_file_processor.py --validate

          deactivate

      - name: Prepare QA Feature File Validation slack message
        if: always()
        id: pre_slack
        run: |
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is unstable :rain_cloud: \
          Install tests feature file validation: ${{ steps.feature_file_install.outcome }} \
          Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo ::set-output name=msg_error::$MESSAGE_ERR

      - name: Slack message failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C02PB9A9F45"
          slack-message: ${{ steps.pre_slack.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Install tests
        timeout-minutes: 45
        id: install
        working-directory: ${{ steps.install_tests_setup.outputs.target_dir }}
        shell: bash
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          . venv/bin/activate
          rm -rf results/*
          pytest tests/ \
            -k 'AMR_installation_validator' \
            --installPath="." --jsonConfigFilePath="../basic-standalone-noetic.json.ci"
          deactivate

          user=$(cat results/credentials.txt | awk -F: '{print $1}')
          pwd=$(cat results/credentials.txt | awk -F: '{print $2}')

          echo ::set-output name=movai_user::$user
          echo ::set-output name=movai_pwd::$pwd

      - name: Run mobtest
        continue-on-error: ${{ inputs.continue_on_mobtest_error }}
        shell: bash
        run: |
          container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
          docker exec -t "$container_id" bash -c '
            set -e
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed
            mobtest proj /opt/ros/noetic/share/
            '

      - name: Collect Installed components
        shell: bash
        run: |
          mkdir -p artifacts

          used_images=($(docker images --format "{{.Repository}}:{{.Tag}}" | tr ' ' "\n"))
          for image in "${used_images[@]}"
          do
            image_short_name=$(grep -oP "(?<=/$ENV/).*?(?=:)" <<< "$image" || grep -oP "(?<=/devops/).*?(?=:)" <<< "$image" || true)
            if [[ "$image_short_name" =~ .*"backend".* || "$image_short_name" =~ .*"spawner".* || "$image_short_name" =~ .*"redis"*.* || "$image_short_name" =~ .*"health-node".* ]];
            then
              echo "scanning $image"
              container_ids=($(docker ps -q -f "ancestor=$image" | tr ' ' "\n"))
              for container_id in "${container_ids[@]}"
              do
                container_name=$(docker inspect --format="{{.Name}}" $container_id)
                docker exec -t "$container_id" bash -c '
                  set -e

                  sudo apt update || apt update
                  export PATH="$HOME/.local/bin:$PATH"
                  python3 -m pip install --upgrade pip || wget https://bootstrap.pypa.io/get-pip.py -O - | python3
                  python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple movai-package-deployer==${{ env.PACKAGE_DEPLOYER_VERSION }}
                  package-deployer scan
                  ls -la /tmp
                ' || true
                  docker cp $container_id:/tmp/deployable.dploy artifacts/$container_name-noetic-deployable.dploy
                  docker cp $container_id:/tmp/undeployable.dploy artifacts/$container_name-noetic-3rdParty.dploy
              done
            else
              echo "Skipping scan of $image"
            fi
          done
          export PATH="$HOME/.local/bin:$PATH"
          package-deployer scan
          cp /tmp/deployable.dploy artifacts/host-noetic-deployable.dploy
          cp /tmp/undeployable.dploy artifacts/host-noetic-3rdParty.dploy

      - name: Stash deploy_artifacts_noetic
        uses: actions/upload-artifact@v2
        with:
          name: deploy_artifacts_noetic
          path: artifacts/*.dploy

      - name: Stash QA artifacts
        if: always()
        shell: bash
        env:
          INSTALL_DIR: ${{ steps.install_tests_setup.outputs.target_dir }}
        run: |
          mkdir qa_artifacts

          # install tests artifacts
          # *.log and *.zip might not exist if the test fails early
          mkdir -p qa_artifacts/install
          cp -r "${INSTALL_DIR}"/results/*.log ./qa_artifacts/install || true
          cp -r "${INSTALL_DIR}"/results/*.zip ./qa_artifacts/install || true
          cp -r "${INSTALL_DIR}"/results/test_report_*.html ./qa_artifacts/install || true

      - name: Stash QA artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: qa_artifacts_install_tests
          path: qa_artifacts/*

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Validation-API-Tests:
    needs: [Standalone-Validations]
    runs-on: integration-pipeline
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: unstash robot_configs
        uses: actions/download-artifact@v2
        with:
          name: robot_configs
          path: .

      - name: Patch robot_configs *.ci with the right full path
        shell: bash
        run: |
          find -L . -type f -name '*.json.ci' -exec \
            sed -i "s;/__w;$(pwd)/../..;g" {} \
           \;

      - name: Setup QA API tests
        id: api_tests_setup
        shell: bash
        run: |
          qa_key=api_tests

          rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt
          export PATH="$HOME/.local/bin:$PATH"

          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt

          tests_dir=$(cat /tmp/target_dir.txt)
          tests_version=$(cat /tmp/version.txt)
          tests_repo_name=$(cat /tmp/repo_name.txt)

          rm -rf $tests_repo_name
          integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
          ls -la $tests_dir

          echo ::set-output name=target_dir::$tests_dir

          # setup venv in a step that is always executed
          pushd "${tests_dir}"
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
          popd

      - name: Install
        id: install
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

          mkdir -p artifacts
          cp *.json artifacts/
          CONFIG_FILE_NAME="basic-standalone-noetic.json"
          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key quickstart_version --output_file quickstart_version

          wget https://movai-scripts.s3.amazonaws.com/QuickStart_$(cat quickstart_version).bash
          chmod +x ./QuickStart_$(cat quickstart_version).bash
          ./QuickStart_$(cat quickstart_version).bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME
          MOVAI_USER="ci"
          MOVAI_PWD="4Iva6UHAQq9DGITj"
          for robot in $(movai-cli robots list); do
            movai-cli robots user "$robot" "$MOVAI_USER" "$MOVAI_PWD"
          done

          echo ::set-output name=movai_user::$MOVAI_USER
          echo ::set-output name=movai_pwd::$MOVAI_PWD

      - name: API tests
        timeout-minutes: 30
        working-directory: ${{ steps.api_tests_setup.outputs.target_dir }}
        shell: bash
        run: |
          . venv/bin/activate

          pytest src/tests \
              --base_url https://${{ steps.agent_info.outputs.ip }} \
              --username ${{ steps.install.outputs.movai_user }} \
              --password ${{ steps.install.outputs.movai_pwd }}

          deactivate

      - name: Stash QA artifacts
        if: always()
        shell: bash
        env:
          API_DIR: ${{ steps.api_tests_setup.outputs.target_dir }}
        run: |
          mkdir qa_artifacts

          # api tests artifacts
          # *.log and *.zip might not exist if the test fails early
          mkdir -p qa_artifacts/api
          cp -r "${API_DIR}"/results/*.zip ./qa_artifacts/api || true

      - name: Stash QA artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: qa_artifacts_api_tests
          path: qa_artifacts/*

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Validation-Flow-Tests: 
    needs: [Standalone-Validations]
    runs-on: integration-pipeline
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: unstash robot_configs
        uses: actions/download-artifact@v2
        with:
          name: robot_configs
          path: .

      - name: Patch robot_configs *.ci with the right full path
        shell: bash
        run: |
          find -L . -type f -name '*.json.ci' -exec \
            sed -i "s;/__w;$(pwd)/../..;g" {} \
           \;

      - name: Setup QA Flow tests
        id: flow_tests_setup
        shell: bash
        run: |
          qa_key=flow_tests

          rm -f /tmp/target_dir.txt /tmp/version.txt /tmp/repo_name.txt /tmp/test_set.txt
          export PATH="$HOME/.local/bin:$PATH"

          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.target_dir --output_file /tmp/target_dir.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.version --output_file /tmp/version.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.name --output_file /tmp/repo_name.txt
          integration-pipeline get_yml_value --file product-manifest.yaml --key product_components.qa.$qa_key.test_set --output_file /tmp/test_set.txt

          tests_dir=$(cat /tmp/target_dir.txt)
          tests_version=$(cat /tmp/version.txt)
          tests_repo_name=$(cat /tmp/repo_name.txt)
          test_set=$(cat /tmp/test_set.txt)

          rm -rf $tests_repo_name
          integration-pipeline fetch_by_tag --repo $tests_repo_name --version $tests_version --gh_api_user $GITHUB_API_USR --gh_api_pwd ${{ secrets.auto_commit_pwd }} --target_dir $tests_dir
          ls -la $tests_dir

          echo ::set-output name=target_dir::$tests_dir
          echo ::set-output name=version::$tests_version
          echo ::set-output name=test_set::$test_set

          # setup venv in a step that is always executed
          pushd "${tests_dir}"
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
          popd

      - name: Install
        id: install
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

          mkdir -p artifacts
          cp *.json artifacts/
          CONFIG_FILE_NAME="basic-standalone-noetic.json"
          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key quickstart_version --output_file quickstart_version

          wget https://movai-scripts.s3.amazonaws.com/QuickStart_$(cat quickstart_version).bash
          chmod +x ./QuickStart_$(cat quickstart_version).bash
          ./QuickStart_$(cat quickstart_version).bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME
          MOVAI_USER="ci"
          MOVAI_PWD="4Iva6UHAQq9DGITj"
          for robot in $(movai-cli robots list); do
            movai-cli robots user "$robot" "$MOVAI_USER" "$MOVAI_PWD"
          done

          echo ::set-output name=movai_user::$MOVAI_USER
          echo ::set-output name=movai_pwd::$MOVAI_PWD
          execution_status=$?
          exit $execution_status
          rm movai_service_version

      - name: Flow tests
        timeout-minutes: 30
        working-directory: ${{ steps.flow_tests_setup.outputs.target_dir }}
        shell: bash
        run: |
          # install test dependencies on host
          sudo apt install -y --allow-downgrades python3-rosnode python3-rosparam python3-rostopic
          export PYTHONPATH="${PYTHONPATH}:/usr/lib/python3/dist-packages"

          # install test dependencies on spawner
          ## get spawner container name
          CONTAINER_ID=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
          ## get apt dependencies
          ## install
          docker exec -t "${CONTAINER_ID}" bash -c "
            sudo apt update
            sudo apt install -y ros-noetic-movai-qa-node-params=${{ steps.flow_tests_setup.outputs.version }}
          "

          # run tests
          . venv/bin/activate

          pytest \
            -s \
            -ra \
            --movai-user ${{ steps.install.outputs.movai_user }} \
            --movai-pw ${{ steps.install.outputs.movai_pwd }} \
            -m '${{ steps.flow_tests_setup.outputs.test_set }}' \
            --tb=short

          deactivate

      - name: Stash QA artifacts
        if: always()
        shell: bash
        env:
          FLOW_DIR: ${{ steps.flow_tests_setup.outputs.target_dir }}
        run: |
          mkdir qa_artifacts

          # flow tests artifacts, they might not exist
          mkdir -p qa_artifacts/flow
          cp -r "${FLOW_DIR}"/*.log ./qa_artifacts/flow || true

      - name: Stash QA artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: qa_artifacts_flow_tests
          path: qa_artifacts/*

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Validations-Finish:
    needs: [Validation-UI-Tests, Validation-Install-Tests, Validation-API-Tests, Validation-Flow-Tests]
    runs-on: ubuntu-20.04
    steps:
      - name: Pass through
        run: echo "Pass"

  publish:
    needs: [Validations-Finish]
    runs-on: integration-pipeline
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3
      - name: Agent info
        id: agent_info
        run: |
          ip=$(hostname -I | awk '{print $1}')
          echo $ip
          echo ::set-output name=ip::$ip
      - name: unstash robot_configs
        uses: actions/download-artifact@v2
        with:
          name: robot_configs
          path: .

      - name: unstash raised_meta
        uses: actions/download-artifact@v2
        with:
          name: raised_meta
          path: platform_configs

      - name: unstash deploy_artifacts_noetic
        uses: actions/download-artifact@v2
        with:
          name: deploy_artifacts_noetic
          path: artifacts

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: Publish and create release
        shell: bash
        run: |
          set -m
          set -e

          export PATH="$HOME/.local/bin:$PATH"
          git config --global --add safe.directory $(pwd)
          git config --global user.name '${{ secrets.auto_commit_user }}'
          git config --global user.email '${{ secrets.auto_commit_mail }}'
          git config --global user.password ${{ secrets.auto_commit_pwd }}

          cp ./platform_configs/product.version product.version
          cp ./platform_configs/product-manifest.yaml product-manifest.yaml

          mkdir -p deployment_artifacts
          package-deployer join --dploy_workspace "$(pwd)/artifacts"
          integration-pipeline get_image_list_from_manifest --manifest_platform_base_key product_components --docker_registry $REGISTRY
          cp *.json deployment_artifacts
          cp artifacts/merged.dploy deployment_artifacts/deployable.dploy
          cp ./artifacts/product.image.artifact deployment_artifacts/product.image.artifact
          cp product.version deployment_artifacts
          cp product-manifest.yaml deployment_artifacts
          product_version=$(cat product.version)

          # danger zone. Everything will be deleted.
          mv product-manifest.yaml product-manifest.yaml.bck

          git restore product.version
          git restore product-manifest.yaml
          git pull
          echo "$product_version" > product.version

          git add product.version
          git commit -m "[skip actions] Automatic Raise"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Prepare raise variables
        id: pre_raise
        run: |
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}

      - name: Raise App version
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.auto_commit_pwd }}
          branch: ${{ steps.pre_raise.outputs.branch }}
          unprotect_reviews: true

      - name: Github Publish
        shell: bash
        run: |
          commit_hash=$(git log --format="%H" -n 1)
          product_version=$(cat product.version)
          gh release create -p --generate-notes --target "$commit_hash" -t "${{ inputs.product_name }} $product_version" $product_version
          # add all files in the deployment_artifacts folder
          find deployment_artifacts -type f -exec gh release upload $product_version {} \;
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Update release notes
        shell: bash
        run: |
          # release version
          product_version=$(cat product.version)

          # get existent release body
          ORIGINAL_RN=$(gh release view "${product_version}" --json body | jq -r .body)

          # get release PRs
          PRS=$(echo "${ORIGINAL_RN}" | sed -rn "s/.*https:\/\/github\.com\/${{ github.repository_owner }}\/${{ github.event.repository.name }}\/pull\/([0-9]+).*/\1/p" | tr '\n' ' ')
          # change to array
          PRS=($PRS)
          echo "Found the following PRs: ${PRS[@]}"

          # new release notes file
          rm -rf notes.txt

          # What's Changed - with info from PRs
          echo "## What's Changed" >> notes.txt

          if [ ${#PRS[@]} -eq 0 ]; then
              # no PRs exist
              echo "No relevant changes." >> notes.txt
          else
              # PRs exist
              for pr in "${PRS[@]}"; do
                  gh pr view "${pr}" --json body | jq -r .body >> notes.txt
              done
          fi
          echo "" >> notes.txt

          # PRs
          echo "## PRs" >> notes.txt
          if [ ${#PRS[@]} -eq 0 ]; then
              # no PRs exist
              echo "No PRs." >> notes.txt
          else
              # PRs exist
              echo "${ORIGINAL_RN}" | grep "\* .* by @.* in https://github.com/${{ github.repository_owner }}/" >> notes.txt
          fi
          echo "" >> notes.txt

          ## Diff
          echo "## Diff" >> notes.txt
          echo "${ORIGINAL_RN}" | grep "\*\*Full Changelog\*\*" >> notes.txt

          # set new release notes
          gh release edit "${product_version}" --notes-file notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Prepare slack variables
        if: always()
        id: pre_slack
        run: |
          MESSAGE=":white_check_mark: CI: ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is stable :sunny: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is unstable :rain_cloud: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo ::set-output name=msg::$MESSAGE
          echo ::set-output name=msg_error::$MESSAGE_ERR

      - name: Slack message success
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C02U028NMB7"
          slack-message: ${{ steps.pre_slack.outputs.msg }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Slack message failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C02U028NMB7"
          slack-message: ${{ steps.pre_slack.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

name: UI Tests
on:
  workflow_call:
    inputs:
      install_tests_ref:
        required: true
        type: string
        description: Install tests reference to use
      test_set:
        required: true
        type: string
        description: Test set to execute
    secrets:
      gh_token:
        required: true
      slack_token_id:
        required: true
      jira_username:
        required: true
      jira_password:
        required: true
      xray_clientid:
        required: true
      xray_secret:
        required: true

jobs:
  Validate-features:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Feature file validation
        shell: bash
        env:
          XRAY_CLIENTID: ${{ secrets.xray_clientid }}
          XRAY_SECRET: ${{ secrets.xray_secret }}
          JIRA_USERNAME: ${{ secrets.jira_username }}
          JIRA_PASSWORD: ${{ secrets.jira_password }}
        run: |
          # create virtual environment
          python3 -m venv venv --clear
          . venv/bin/activate

          # install tests requirements in venv
          pip install \
            -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple \
            --extra-index-url https://pypi.org/simple \
            -r requirements.txt

          xray download ${{ inputs.test_set }}
          xray compare ./tests/feature/

  Validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if pre-commit config exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: ".pre-commit-config.yaml"

      - name: Install dependencies
        if: steps.check_files.outputs.files_exists == 'true'
        run: pip install pre-commit

      - name: Run pre-commit
        if: steps.check_files.outputs.files_exists == 'true'
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  Run-tests:
    runs-on: qa-runner
    needs: [Validate]
    steps:
      - name: Cleanup Workspace
        uses: rtCamp/action-cleanup@master

      - name: Checkout
        uses: actions/checkout@v4

      - name: Agent info
        id: agent_info
        run: |
          ip_tmp=$(hostname -I | awk '{print $1}')
          echo "ip=$ip_tmp" | tee >> $GITHUB_OUTPUT

      - name: Update/upgrade host packages
        run: |
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do echo Waiting for other software managers to finish... ; sleep 5;done
          sudo apt-get update
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do echo Waiting for other software managers to finish... ; sleep 5;done
          sudo apt-get upgrade -y

      - name: Setup environment
        shell: bash
        run: |
          # install test dependencies on host
          sudo apt install -y --allow-downgrades python3-rosnode python3-rosparam python3-rostopic

          # create virtual environment
          rm -rf venv
          python3 -m venv venv
          . venv/bin/activate

          # install tests requirements in venv
          pip install -r requirements.txt

      - name: UI tests
        id: ui
        shell: bash
        run: |
          export PYTHONPATH="${PYTHONPATH}:/usr/lib/python3/dist-packages"
          # activate venv
          . venv/bin/activate
          # tests execution
          pytest \
            --hub_url http://selenoid-ui.hel.mov.ai \
            --base_url https://${{ steps.agent_info.outputs.ip }}/ \
            --install-platform

      - name: Save docker container logs
        if: always()
        shell: bash
        run: |
          # for sanity
          docker ps -a

          # save all container logs and inspect
          CONTAINERS=$(docker ps -a --format '{{.Names}}')
          for container in ${CONTAINERS}; do
              docker logs "${container}" &> "${container}.log" || true
              docker inspect "${container}" &> "${container}-inspect.log"
          done || true

          # movai-service
          journalctl -u movai-service --since '1hour ago' &> "movai-service.log"

          # spawner (mobros firmware)
          journalctl -u movai-service -t mobros --since '1hour ago' &> spawner-firmware.log || true

      - name: Stash QA artifacts
        if: always()
        shell: bash
        run: |
          # cleanup
          rm -rf qa_artifacts

          # tests artifacts
          # *.log and *.zip might not exist if the test fails early
          mkdir -p qa_artifacts
          cp -r *.log ./qa_artifacts || true
          cp -r *.tar ./qa_artifacts || true
          cp -r *.json ./qa_artifacts || true
          cp -r *.html ./qa_artifacts || true

          # install
          mkdir -p qa_artifacts/install
          cp -r ./installation ./qa_artifacts/ || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa_artifacts_ui_tests
          path: qa_artifacts/*
          retention-days: 3

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          timeout 30 movai-cli remove --all || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

name: Clean closed PR 

on:
  workflow_call:
    inputs:
      product_name:
        required: true
        type: string
      registries:
        required: true
        type: string
      ros_distro:
        required: true
        type: string
      clean_images:
        required: false
        type: boolean
        default: true
    secrets:
      gh_token:
        required: true
      registry_user:
          required: true
      registry_password:
        required: true

jobs:
  handle-pr-merge:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
        registry: ${{ fromJSON(inputs.registries) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Clean Artifacts from github
        id: clean_artifacts
        run: |
          # Retrieve all artifacts using GitHub API
          ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.gh_token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
        
          ARTIFACT_IDS=$(echo "$ARTIFACTS" | jq -r ".artifacts[] | select(.name | startswith(\"pr${{ github.event.pull_request.number }}~\")) | .id")

          if [ -z "$ARTIFACT_IDS" ]; then
            echo "No artifacts found for PR ${{ github.event.pull_request.number }}"
            exit 0
          fi

          echo "Artifacts to delete: $ARTIFACT_IDS"

          for ARTIFACT_ID in $ARTIFACT_IDS; do
            echo "Deleting artifact $ARTIFACT_ID"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.gh_token }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
          done
      
      - name: Remote - Login to Docker Registry
        if: ${{ inputs.clean_images }}
        shell: bash
        run: |
          docker login ${{ matrix.registry }} -u ${{ secrets.registry_user }} -p ${{ secrets.registry_password }}

      - name: Clean images from registry
        if: ${{ inputs.clean_images }}
        id: clean_images
        run: |
          sudo apt install skopeo -y

          PR_NUMBER=${{ github.event.pull_request.number }}
          TAG="pr${PR_NUMBER}"
          echo Deleting images with tags related to $TAG

          echo "Cleaning images from ${{ matrix.registry }}"

          namespaces=(prod qa ci devops)
          for ns in "${namespaces[@]}"; do
            echo "Cleaning images from $ns"
            img_path="$ns/${{ inputs.product_name }}-${{ matrix.distro }}"
            tags=$(skopeo list-tags "docker://${{ matrix.registry }}/$img_path" | awk -F '"' '{print $2}')
            for tag in $tags; do
              # if pr number in tag
              if [[ $tag == *"$TAG"* ]]; then
                echo Deleting image "docker://${{ matrix.registry }}/$img_path:$tag"
                skopeo delete "docker://${{ matrix.registry }}/$img_path:$tag"
                sleep 0.1
              fi
            done
          done
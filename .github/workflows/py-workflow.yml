name: Build and pack py packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      skip_linting:
        required: false
        type: string
        default: 'false'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true
      sonarcloud_token:
        required: true

jobs:
  Build:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: install build-requirements
      run: python3 -m pip install -r build-requirements.txt

    - name: Python Linter
      if: ${{ inputs.skip_linting == 'true' }}
      run: |
        python3 -m pylint *
        python3 -m black .
        python3 -m flake8

    - name: Run tests
      run: tox

    - name: Sonar Scan
      if: ${{ !github.event.repository.private }}
      uses: MOV-AI/action-forward-reports-to-sonar@feature/python-coverage
      with:
        sonarcloud_token: ${{ secrets.sonarcloud_token }}
        sonarqube_token: ${{ secrets.sonar_token }}
        sonarqube_host_url: https://sonarqube.aws.cloud.mov.ai

    - name: Raise version
      if: ${{ inputs.deploy == 'true' }}
      run: bump2version build setup.py --no-tag --no-commit

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(cat .bumpversion.cfg | sed s/' '/''/g | grep 'current_version=' | sed s/'current_version='/''/g)
        PACKAGE_NAME=$(cat setup.py | grep name | cut -d '"' -f2)

        echo ::set-output name=py_pkg_name::$PACKAGE_NAME
        echo ::set-output name=py_pkg_version::$PACKAGE_VERSION

    - name: Sync setup.py
      run: sed -i s/"$(cat setup.py | grep version)"/"    version=\"${{ steps.vars.outputs.py_pkg_version }}\","/g setup.py

    - name: Push auto raise version
      id: raise
      if: ${{ inputs.deploy == 'true' }}
      run: |
        git config --global user.name ${{ secrets.auto_commit_user }}
        git config --global user.email ${{ secrets.auto_commit_mail }}
        git add setup.py
        git add .bumpversion.cfg
        git commit -m "Automatic Bump of build version"
        git pull
        git push --force-with-lease
        commit_hash=$(git log --format="%H" -n 1)
        echo ::set-output name=commit_id::$commit_hash

    - name: Enable 4 digit version
      id: releasevars
      run: |
        PACKAGE_RELEASE_VERSION=$(echo ${{ steps.vars.outputs.py_pkg_version }} | sed s/"-"/"."/g)
        sed -i s/"$(cat setup.py | grep version)"/"$(cat setup.py | grep version | sed s/"-"/"."/g)"/g setup.py

        echo ::set-output name=py_pkg_version::$PACKAGE_RELEASE_VERSION

    - name: build
      run: python3 -m build

    - name: Archive binary
      uses: actions/upload-artifact@v2
      with:
        name: packages
        path: dist/*

    - name: Publish package to TestPyPI Experimental
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.cloud.mov.ai/repository/pypi-experimental/

    - name: Publish package to TestPyPI Testing
      if: ${{ inputs.deploy == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.cloud.mov.ai/repository/pypi-integration/

    - name: Create Github Release
      if: ${{ inputs.deploy == 'true' }}
      shell: bash
      run: |
        title="Release of ${{ steps.releasevars.outputs.py_pkg_version }}"
        git config --global --add safe.directory $(pwd)

        gh release create -p -t "$title" -n "Release notes for ${{ steps.vars.outputs.py_pkg_name }}" \
        --target ${{ steps.raise.outputs.commit_id }} \
        --generate-notes \
        ${{ steps.releasevars.outputs.py_pkg_version }}

        # add all files in the artifacts folder
        assets=()
        for asset in dist/*; do
          # do nothing if folder is empty
          if [[ $asset != "dist/*" ]]; then
            gh release upload ${{ steps.releasevars.outputs.py_pkg_version }} $asset
          fi
        done

      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}


  Release:
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set tag output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Fetch artifact from github release
      run: |
        mkdir dist
        cd dist
        gh release download ${{ steps.vars.outputs.tag}} -p *.whl
        gh release download ${{ steps.vars.outputs.tag}} -p *.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Archive binary
      uses: actions/upload-artifact@v2
      with:
        name: packages
        path: dist/*

    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.cloud.mov.ai/repository/pypi-edge/
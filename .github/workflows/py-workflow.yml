name: Build and pack py packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      skip_linting:
        required: false
        type: string
        default: 'false'
        description: DEPRECATED - to be removed on v2
      run_black:
        required: false
        type: string
        default: 'false'
        description: When 'true' black is run stopping the pipeline if any files are not properly formatted
      prod_publish_repos:
        required: false
        type: string
        default: '["ppa-main"]'
    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true

jobs:
  Build:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: install build-requirements
      run: python3 -m pip install -r build-requirements.txt

    - name: Run Black
      if: ${{ inputs.run_black == 'true' }}
      run: |
        python3 -m black
          --line-length 100 \
          --diff \
          --check \
          .

    - name: Python Linters
      # run linters isolated so no issues are masked from SonarCloud
      run: |
        python3 -m flake8 \
          --isolated \
          --exclude dist,.*\.egg-info,.git,__pycache__,.tox,venv \
          --max-complexity 10 \
          --max-line-length 100 \
          --exit-zero \
          --output-file flake8-report.txt

        # pylint seems to not have a way to ignore configuration files
        # so we need to provide it a dummy one
        touch dummy-pylint-config
        python3 -m pylint \
          --rcfile dummy-pylint-config \
          --ignore-patterns dist,.*\.egg-info,.git,__pycache__,.tox,venv \
          --max-line-length 100 \
          --exit-zero \
          --recursive y \
          --output pylint-report.txt \
          .

    - name: Run tests
      run: |
        if [ -f tox.ini ]; then
            # run tests and generates coverage.xml
            tox
        else
            # run tests
            python3 -m pytest tests/
        fi

    - name: Check if SonarCloud project exists
      if: ${{ !github.event.repository.private }}
      id: sonar_project
      env:
        GITHUB_ORG: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        SONAR_ORG: mov-ai
        SONAR_TOKEN: ${{ secrets.sonar_token }}
      run: |
        json=$( \
            curl -k -s  \
                -X POST \
                -u "${SONAR_TOKEN}:" \
                -d "projects=${GITHUB_ORG}_${REPO_NAME}&organization=${SONAR_ORG}" \
                "https://sonarcloud.io/api/projects/search"
        )

        echo "Project search results: ${json}"

        found_proj_num=$(echo "${json}" | jq '.components | length')

        # project was not found
        if [ "${found_proj_num}" -eq 0 ]; then
            echo "SonarCloud project does not exist"
            echo ::set-output name=exists::false
            exit 0
        fi

        # if -r is not used the returned string is double quoted
        found_proj=$(echo "${json}" | jq -r '.components[0].key')

        # project was found and the name matches
        if [ "${found_proj_num}" -eq 1 ] && [ "${found_proj}" = "${GITHUB_ORG}_${REPO_NAME}" ]; then
            echo "SonarCloud project exists"
            echo ::set-output name=exists::true
            exit 0
        fi

        # else error
        exit 1

    - name: Create SonarCloud project
      if: ${{ !github.event.repository.private && steps.sonar_project.outputs.exists == 'false' }}
      env:
        GITHUB_ORG: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_ORG: mov-ai
        SONAR_TOKEN: ${{ secrets.sonar_token }}
      run: |
        # find repository ID
        json=$(curl \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/${GITHUB_ORG}/${REPO_NAME}")
        REPO_ID=$(echo "${json}" | jq .id)
        echo "Repository ID: ${REPO_ID}"

        # create project
        curl --include \
          -X POST \
          -u "${SONAR_TOKEN}:" \
          -d "organization=${SONAR_ORG}&installationKeys=${GITHUB_ORG}%2F${REPO_NAME}%7C${REPO_ID}" \
          "https://sonarcloud.io/api/alm_integration/provision_projects"

        # disable autoscan (it is enabled at project creation)
        curl --include \
          -X POST \
          -u "${SONAR_TOKEN}:" \
          -d "enable=false&projectKey=${GITHUB_ORG}_${REPO_NAME}" \
          "https://sonarcloud.io/api/autoscan/activation"

    - name: SonarCloud Scan
      if: ${{ !github.event.repository.private }}
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ github.token }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.sonar_token }}
      with:
        projectBaseDir: ./
        args: >
          -Dsonar.organization=mov-ai
          -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
          -Dsonar.sources=.
          -Dsonar.scm.provider=git
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300
          -Dsonar.python.flake8.reportPaths=flake8-report.txt
          -Dsonar.python.pylint.reportPaths=pylint-report.txt
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Link to SonarCloud dashboard
      if: ${{ !github.event.repository.private }}
      shell: bash
      run: |
        echo "Please check report here: https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }}"

    - name: Raise version
      if: ${{ inputs.deploy == 'true' }}
      run: bump2version build setup.py --no-tag --no-commit

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(cat .bumpversion.cfg | sed s/' '/''/g | grep 'current_version=' | sed s/'current_version='/''/g)
        PACKAGE_NAME=$(cat setup.py | grep name | cut -d '"' -f2)

        echo ::set-output name=py_pkg_name::$PACKAGE_NAME
        echo ::set-output name=py_pkg_version::$PACKAGE_VERSION

    - name: Sync setup.py
      run: sed -i s/"$(cat setup.py | grep version)"/"    version=\"${{ steps.vars.outputs.py_pkg_version }}\","/g setup.py

    - name: Push auto raise version
      id: raise
      if: ${{ inputs.deploy == 'true' }}
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name ${{ secrets.auto_commit_user }}
        git config --global user.email ${{ secrets.auto_commit_mail }}
        git add setup.py
        git add .bumpversion.cfg
        git commit -m "Automatic Bump of build version"
        git pull
        git push --force-with-lease
        commit_hash=$(git log --format="%H" -n 1)
        echo ::set-output name=commit_id::$commit_hash

    - name: Enable 4 digit version
      id: releasevars
      run: |
        PACKAGE_RELEASE_VERSION=$(echo ${{ steps.vars.outputs.py_pkg_version }} | sed s/"-"/"."/g)
        sed -i s/"$(cat setup.py | grep version)"/"$(cat setup.py | grep version | sed s/"-"/"."/g)"/g setup.py

        echo ::set-output name=py_pkg_version::$PACKAGE_RELEASE_VERSION

    - name: build
      run: python3 -m build

    - name: Archive binary
      uses: actions/upload-artifact@v2
      with:
        name: packages
        path: dist/*

    - name: Publish package to TestPyPI Experimental
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.cloud.mov.ai/repository/pypi-experimental/

    - name: Publish package to TestPyPI Integration
      if: ${{ inputs.deploy == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.cloud.mov.ai/repository/pypi-integration/

    - name: Create Github Release
      if: ${{ inputs.deploy == 'true' }}
      shell: bash
      run: |
        title="Release of ${{ steps.releasevars.outputs.py_pkg_version }}"
        git config --global --add safe.directory $(pwd)

        gh release create -p -t "$title" -n "Release notes for ${{ steps.vars.outputs.py_pkg_name }}" \
        --target ${{ steps.raise.outputs.commit_id }} \
        --generate-notes \
        ${{ steps.releasevars.outputs.py_pkg_version }}

        # add all files in the artifacts folder
        assets=()
        for asset in dist/*; do
          # do nothing if folder is empty
          if [[ $asset != "dist/*" ]]; then
            gh release upload ${{ steps.releasevars.outputs.py_pkg_version }} $asset
          fi
        done

      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}


  Release:
    strategy:
      matrix:
        publish_repo: ${{ fromJSON(inputs.prod_publish_repos) }}
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set tag output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir dist
        cd dist
        gh release download ${{ steps.vars.outputs.tag}} -p *.whl
        gh release download ${{ steps.vars.outputs.tag}} -p *.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Archive binary
      uses: actions/upload-artifact@v2
      with:
        name: packages
        path: dist/*

    - name: Publish package to ${{ matrix.publish_repo }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository_url: https://artifacts.aws.cloud.mov.ai/repository/${{ matrix.publish_repo }}/
